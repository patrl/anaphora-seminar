#+title: Identifying discourse referents 
#+subtitle: Dynamic semantics meets inquisitive semantics
#+author: Patrick D. Elliott 
#+bibliography: ../../bibliography/master.bib
#+setupfile: handout-template.org
#+OPTIONS: ':t
#+cite_export: biblatex

#+begin_export latex
\tikzstyle{inq}=[rounded corners,fill=gray,fill opacity=.1]
#+end_export

* Resources

- [cite:@DotlacilRoelofsen2019]
- [cite:@DotlacilRoelofsen2021]
- [cite:@DotlacilRoelofsen2021a]
  
* Initial motivations

** Background

In this class, we've explored theories of anaphora which rely on a fine-grained notion of information, which encodes contextual (un)certainty about the values of variables (i.e., discourse referents). Asserting an existential statement:

1. Narrows down the /worldly/ possibilities.
2. Expands the range of /anaphoric/ possibilities.

In a Heimian world, asserting an existential statement both (i) narrows down the /worldly/ possibilities, and (ii) expands the range of anaphoric possibilities.

Most work in dynamic semantics doesn't look beyond a classical Stalnakerian model of discourse, where Heimian file contexts are used to model the /context set/. 

Heimian file contexts, while extending the classical notion of an information state, aren't expressive enough to capture /issues/ raised by interrogative sentences.

** Initial motivations: questions and anaphora

In truth-conditional semantics, questions are typically analyzed in terms of their resolution conditions [cite:@Hamblin1973;@Karttunen1977;@GroenendijkStokhof1984].

Initial motivations for a dynamic approach to questions [cite:@Groenendijk1998;@Haida2007]: there is more to the meaning of a question than just its (classical) resolution conditions, as shown by interrogative variations of Partee's famous marble sentences:

#+name: marble
#+begin_exe
\ex Of my six marbles, which\(^x\) one is not in the bag? Is it\(_x\) under the sofa?
\ex Of my six marbles, which five are in the bag? #Is it\(_x\) under the sofa?
#+end_exe

** Complex interrogatives and accessibility

/Wh/-expressions, just like indefinites, can introduce discourse referents. A subsequent pronoun can (but need not) be itself embedded in a question.

#+name: who
#+begin_exe
\ex Who\(^x\) is at the door? How long have they\(_x\) been waiting for?
\ex Who\(^x\) is at the door? They\(_x\)'re knocking extremely loudly.
#+end_exe

Additionally, indefinites in polar questions can license discourse anaphora (in conjunctive questions). 

#+name: polar
#+begin_exe
\ex Did you read a paper, and did you enjoy it?
#+end_exe

The conditions under which indefinites in questions license discourse anaphora in a subsequent declarative relate to the generalization we've explored for much of this semester - a pronoun is licensed just in case a discourse referrent is contextually entailed (see also [cite:@Mandelkern2022]). 

#+name: pol
#+begin_exe
\ex *A:* Does Andreea have a\(^x\) husband? *B:* Yes, she's married. He\(_x\)'s waiting outside.
\ex *A:* Does Andreea have a\(^x\) husband? *B:* ???No, she isn't married. He\(_x\)'s waiting outside.
#+end_exe

Indefinites inside of /wh/-interrogatives can license discourse anaphora too:

#+name: wh-etype
#+begin_exe
\ex Who\(^x\) is presenting a\(^y\) paper, and are they\(_x\) presenting it\(_y\) on Wednesday?
#+end_exe

One manifestation of this is the availability of so-called "e-type" readings of quantifiers under ellipsis [cite:@Merchant2001], explored in detail from a dynamic perspective by [cite:@ElliottSudo2016].[fn:4] 

#+name: sluicing
#+begin_exe
\ex If John asks me /how/ a\(^x\) mathematical theorem was proved, I will also tell him by whom...
\begin{xlist}
\ex ?\dots \sout{a\(^y\) mathematical theorem was proved.}
\ex \dots \sout{the\(_x\) mathematical theorem was proved.}
\end{xlist}
#+end_exe

This observation extends to discourse plurals:

#+name: sluicing2
#+begin_exe
\ex John applied to five\(^x\) graduate schools, but I don't know why...
\begin{xlist}
\ex \dots \sout{John applied to five graduate schools.}
\ex \dots \sout{John applied to the\(_x\) five graduate schools.}
\end{xlist}
#+end_exe

In addition to discourse anaphora, /donkey/ anaphora is available in /conditional questions/; unsurprisingly, both weak and strong readings are available. 

#+name: donkey
#+begin_exe
\ex If a\(^x\) farmer owns a\(^y\) donkey, will he\(_x\) beat it\(^x\)?
\ex If you have a\(^x\) credit card, would you mind paying with it\(_x\)?
#+end_exe

More generally, it seems that accessibility in complex questions patterns with accessibilty in complex decalaratives (see especially [cite:@Enguehard2021] on parallel presupposition projection facts).

#+name: wh-proj
#+begin_exe
\ex Which\(^x\) paper did you read and did you enjoy it\(_x\)?
\ex Did you read a\(^x\) paper, and did you enjoy it\(_x\)?
\ex Did you NOT read a\(^x\) paper, or did you enjoy it\(_x\)?
\ex If you read a\(^x\) paper, did you enjoy it\(_x\)?
#+end_exe

** Intervention effects

Examples from [cite:@Beck1996;@Beck2006].

#+begin_export latex
\begin{exe}
\ex 
\gll
Wer hat Luise \textbf{wo} angetroffen?\\
Who has Luise where met?\\
\ex[*]{
\gll
Wer hat niemanden \textbf{wo} angetroffen?\\
Who has nobody where met?\\}
\ex
\gll
Wer hat \textbf{wo} niemanden angetroffen?\\
Who has where nobody met?\\
\end{exe}
#+end_export

Suspicion of the dynamic approach to intervention effects [cite:@Haida2007;@Honcoop1998]:

- The operators that are responsible for intervention effects are just those that are /externally static/ in the sense of [cite:@GroenendijkStokhof1991a].

** The plan

- /Inquisitive semantics/ provides a framework in which a uniform notion of information captures both what is mutually known, and what is mutually taken to be at issue. This makes it extremely well-suited to providing a uniform account of how assertions/questions contribute information to the context set, as explored in a wide range of works [cite:@CiardelliEtAl2019].
- Combine the basic ideas of dynamic semantics and inquisitive semantics (based on [cite:@DotlacilRoelofsen2019]).
  
* Inquisitive semantics: the basics  

One of the basic ideas behind inquisitive semantics is that contexts have additional structure - instead of treating a context as an information state, we treat contexts as /downward closed sets of information states/.[fn:1] 

Such structures are expressive enough to capture /issues/ while subsuming (classical) /informational content.

- Concretely, the /informational content/ of an inquisitive context \(C\) is just the union of all \(s \in C\). 
- What's at issue is represented by the /alternatives/, i.e., the maximal elements of \(C\); a context is /inquisitive/ just in case it includes more than one alternative.

In a standard inquisitive setting, the initial context is simply the powerset of the ignorance state. We can handily represent inquisitive contexts using diagrams where maximal states are highlighted.

#+begin_export latex
\[
  \begin{NiceArray}{cc}
    w_{ab} & w_{a} \\
    w_{b} & w_{\emptyset } \\
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(1-1) (2-2)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \qquad
\begin{NiceArray}{cc}
    w_{ab} & w_{a} \\
    w_{b} & w_{\emptyset } \\
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(1-1) (1-2)] {};
     \node[draw,inq,fit=(1-1) (2-1)] {};
  \end{tikzpicture}
  \end{NiceArray}
\qquad
\begin{NiceArray}{cc}
    w_{ab} & w_{a} \\
    w_{b} & w_{\emptyset } \\
  \CodeAfter
 \begin{tikzpicture}
     \node[fit=(1-1) (1-2)] (1r) {};
     \node[fit=(1-1) (2-1)] (1c) {};
     \draw[inq] (1r.north west) -| (1r.south east) -| (1c.south east) -- (1c.south west) -- cycle;
     \node[draw,inq,fit=(2-2)] {};
  \end{tikzpicture}
  \end{NiceArray}
\]
#+end_export

The middle diagram illustrates an inquisitive context with two alternatives - the result of updating the initial context with "a or b".

Unlike partition semantics, inquisitive semantics by default gives rise to weak resolution conditions - the issue raised by "a or b" is resolved by the proposition "that \(a\)" and the proposition "that \(b\)" (no exclusivity inference). 

Atomic sentences denote downward closed sets of states, i.e., the states which /support/ the sentence. Update is cashed out simply as set intersection (just as in a Stalnakerian setting).

#+name: a
#+begin_exe
\ex \([a] := \set{s | s \vdash a}\)
#+end_exe

#+begin_export latex
\[
  \begin{NiceArray}{cc}
    w_{ab} & w_{a} \\
    w_{b} & w_{\emptyset } \\
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(1-1) (2-2)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \quad\xRightarrow{a}\quad
  \begin{NiceArray}{cc}
    w_{ab} & w_{a}\\
    w_{b} & w_{\emptyset }
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(1-1) (1-2)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \]
#+end_export

Disjunctive sentences denote the /union/ of the states that support each disjunct; when we update a context with a disjunctive sentence, we get back an inquisitive context where each disjunct is reflected in an alternative.

#+name: disj
#+begin_exe
\ex \([\phi \vee \psi] := [\phi] \cup [\psi]\)
#+end_exe

#+begin_export latex
\[
  \begin{NiceArray}{cc}
    w_{ab} & w_{a} \\
    w_{b} & w_{\emptyset } \\
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(1-1) (2-2)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \quad\xRightarrow{a \vee b}\quad
  \begin{NiceArray}{cc}
    w_{ab} & w_{a} \\
    w_{b} & w_{\emptyset } \\
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(1-1) (1-2)] {};
     \node[draw,inq,fit=(1-1) (2-1)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \]
#+end_export

Conjunction is just intersection:

#+name: disj
#+begin_exe
\ex \([\phi \vee \psi] := [\phi] \cap [\psi]\)
#+end_exe

Negation closes off issues (defined derivatively here in terms of *info*):

#+name: info
#+begin_exe
\ex \([\mathbf{info}(\phi)] := P(\bigcup[\phi])\)
#+end_exe

#+name: neg
#+begin_exe
\ex \([\neg\phi] := P(W - [\mathbf{info}(\phi)])\)
#+end_exe

* Inquisitive dynamic semantics [cite:@DotlacilRoelofsen2019] 

** The basic system

In standard inquistive semantics, information states are sets of possible worlds; in dynamic inquisitive semantics, we replace this notion with Heimian states.

We'll start by giving a static notion of support for atomic sentences.

#+begin_definition
*Support*. Support for atomic sentences.

\[\begin{aligned}[t]
s \vdash P(x_1,\ldots,x_n) \iff \forall (w,g) \in s, (g(x_1),\ldots,g(x_n)) \in I_w(P)
\end{aligned}\]
#+end_definition

#+begin_definition
*Atomic sentences*. If \(\phi \) is atomic, then:

- \(C[\phi] = \set{s \in C | s \vdash \phi}\)
#+end_definition

As before, we'll continue to assume that assignments are partial.

- We need to say what happens if an atomic sentence isn't defined at a possibility in some information state.
- Following [cite:@DotlacilRoelofsen2019], we'll assume that if a sentence \(\phi\) is undefined at any possibility in any state \(s \in C\), the result is undefinedness (implicitly, a weak Kleene logic).

#+begin_definition
*Conjunction*. As in update semantics, conjunction is interpreted as a successive update.

- \(C[\phi \wedge \psi] = C[\phi][\psi]\)
#+end_definition

Discourse referents are introduced state-by-state via random assignment.

#+begin_definition
*Random assignment* (contexts). Random assignment at a context performs random assignment pointwise on states.[fn:2] 

- \(C[\varepsilon_x] := \set{s[\varepsilon_x]|s \in C}\)
#+end_definition

In effect, an atomic sentence with a variable \(x\) presupposes at \(C\) familiarity of \(x\) at /every/ state in \(C\); random assignment guarantees familiarity at every state.

The diagram below illustrates how random assignment (a) expands states and (b) an atomic sentence cuts the possibilities back down. N.b. none of the resulting contexts are inquisitive (yet).

#+begin_export latex
\[
  \begin{NiceArray}{ccccc}
    & w_{a} & w_{ab} & w_{b} & w_\emptyset  \\
   [] & \bullet  & \bullet  & \bullet & \bullet\\
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(2-2) (2-5)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \quad
\xRightarrow{\varepsilon_x}
\quad
  \begin{NiceArray}{ccccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(2-2) (3-5)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \quad
\xRightarrow{P(x)}
\quad
  \begin{NiceArray}{ccccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
 \begin{tikzpicture}
 \node[fit=(2-2) (2-3)] (2-23) {};
 \node[fit=(3-3) (3-4)] (3-34) {};
 \draw[draw,inq] (2-23.north west) -- (2-23.north east) |- (3-34.north east) |- (3-34.south east) -- (3-34.south west) |- (2-23.south west) -- cycle;
     \end{tikzpicture}
  \end{NiceArray}
  \]
#+end_export

#+begin_definition
*Disjunction*. Disjunction parallels inquisitive disjunction and DPL's program disjunction, and as such gives rise to an inquisitive context.

- \(C[\phi \vee \psi] = C[\phi] \cup C[\psi]\) 
#+end_definition

It's important to note that the disjunction that [cite:@DotlacilRoelofsen2019] assume is internally static but externally dynamic.

** Issues about discourse referents

Having information about the values of variables encoded in states allows us to define an interesting operation -- \(?_x\), which raises an issue about the value of \(x\) by inducing alternatives that agree on \(x\):[fn:3] 

#+begin_definition
*Witness identification operator*.

- \(C[?_x] := \set{s \in C | \forall i, i' \in s, i \sim_x i'}\)
#+end_definition

#+begin_export latex
\begin{equation}
  \begin{NiceArray}{cccc}
    & w_{a} & w_{ab} & w_{b} \\
   [x \to a] & \bullet  & \bullet  & \bullet \\
   [x \to b] & \bullet  & \bullet  & \bullet 
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(2-2) (3-4)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \quad
\xRightarrow{?_x}
\quad
  \begin{NiceArray}{cccc}
    & w_{a} & w_{ab} & w_b\\
   [x \to a] & \bullet  & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(2-2) (2-4)] {};
     \node[draw,inq,fit=(3-2) (3-4)] {};
  \end{tikzpicture}
  \end{NiceArray}
\end{equation}
#+end_export

Inquisitive existential quantification can be defined  syncategorematically in terms of random assignment and variable identification. \(\exists_x\phi \) does the following:

- Randomly assigns values to \(x\), as restricted by \(\phi \).
- Raises an issue about the value of \(x\).

#+name: context3
#+begin_exe
\ex \(\exists_x\phi := (\varepsilon_x \wedge \phi) \wedge ?_x\)
#+end_exe

#+begin_export latex
\begin{equation}
  \begin{NiceArray}{ccccc}
    & w_{a} & w_{ab} & w_{b} & w_\emptyset  \\
   [] & \bullet  & \bullet  & \bullet & \bullet\\
  \CodeAfter
 \begin{tikzpicture}
     \node[draw,inq,fit=(2-2) (2-5)] {};
  \end{tikzpicture}
  \end{NiceArray}
  \quad
\xRightarrow{\varepsilon_x \wedge P(x)}
\quad
  \begin{NiceArray}{ccccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
 \begin{tikzpicture}
 \node[fit=(2-2) (2-3)] (2-23) {};
 \node[fit=(3-3) (3-4)] (3-34) {};
 \draw[draw,inq] (2-23.north west) -- (2-23.north east) |- (3-34.north east) |- (3-34.south east) -- (3-34.south west) |- (2-23.south west) -- cycle; 
  \end{tikzpicture}
  \end{NiceArray}
  \quad
\xRightarrow{?_x}
\quad
  \begin{NiceArray}{ccccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
 \begin{tikzpicture}
 \node[draw,inq,fit=(2-2) (2-3)] {};
 \node[draw,inq,fit=(3-3) (3-4)] {};
  \end{tikzpicture}
  \end{NiceArray}
\end{equation}
#+end_export

** Discharging issues

In standard inquisitive semantics /non-inquisitive closure/ (\(!\)) closes off issues associated with an inquisitive context. Its definition is simple:

#+begin_definition
*Non-inquisitive closure* (contexts). 

- \(!C = P(\mathbf{info}(C))\)
#+end_definition

In inquisitive dynamic semantics, we can define a closure operator \(!\) that closes off issues in its scope but /not/ discourse referents.

#+begin_definition
*Non-inquisitive closure*. 

- \(C[!\phi] := \set{s' \in !C[\phi]|\exists s \in C, s \leq s'}\)
#+end_definition

This allows us to close off the issues raised by an existential statement while retaining the introduced discourse referents. Moreover, the following are equivalent:

#+name: ex
#+begin_exe
\ex \(!(\varepsilon_x \wedge P(x) \wedge ?_x)\)
\ex \(\varepsilon_x \wedge P(x)\)
#+end_exe

This provides tools for distinguishing between the semantic contribution of an indefinite vs. an interrogative.

Negation on the other hand is defined in such a way that in closes off issues (as negation does in inquisitive semantics) /and/ discourse referents (as negation does in dynamic semantics):

#+begin_definition
*Negation*. Negation of \(\phi \) at \(C\) returns the states in \(C\) which don't have a consistent substate that subsists in \(C[\phi]\)

- \(C[\neg\phi] := \set{s \in C| \neg\exists t[t \neq \emptyset \wedge t \subseteq s \wedge t \prec C[\phi]]}\)
#+end_definition

Just as in standard inquisitive semantics, issues can be raised by disjunction. Inquisitive closure is used to analyze polar questions.

#+begin_definition
*Inquisitive closure*.

- \(?\phi := \phi \vee \neg\phi \)
#+end_definition

** Implication

#+begin_definition
*Implication*.

- \(C[\phi \to \psi] := \set{s \in C| \forall t \subseteq s,\text{each descendant of }t\text{ in }C[\phi]\text{ subsists in }C[\phi][\psi]}\)
#+end_definition

** Empirical payoff

*** Anaphora between questions

#+name: which-man
#+begin_exe
\ex Which\(^x\) man read a\(_y\) book? Did he\(_x\) like it\(_y\)?
\ex \(\underbrace{\varepsilon_x \wedge \varepsilon_y \wedge M(x) \wedge B(y) \wedge R(x,y) \wedge ?_x}_{\text{wh-Q}} \wedge \underbrace{?(L(x,y))}_{\text{pol-Q} }\)
#+end_exe

- The first conjunct introduces a man dref \(x\) and a book dref \(y\), s.t., \(x\) read \(y\), and raises an issue about the value of \(x\).
- Suppose there are two men, Gabe and Al. There will be two contextual alternatives:
  * \(\set{(w,[x \to G,y \to b])|G\text{ read }b\text{ in }w}\)
  * \(\set{(w,[x \to A,y \to b])|A\text{ read }b\text{ in }w}\)
- Familiarity is satisfied, since \(x\) and \(y\) are familiar throughout all states in the resulting context. Inquisitive closure introduces a new issue about whether \(x\) liked \(y\). Now we have four contextual alternatives:
  * \(\set{(w,[x \to G,y \to b])|G\text{ read and liked }b\text{ in }w}\)
  * \(\set{(w,[x \to G,y \to b])|G\text{ read and didn't like }b\text{ in }w}\)
  * \(\set{(w,[x \to A,y \to b])|A\text{ read and liked }b\text{ in }w}\)
  * \(\set{(w,[x \to A,y \to b])|A\text{ read and didn't like }b\text{ in }w}\)
    
*** Anaphora from polar questions

In dynamic inquisitive semantics, the possibilities of anaphora from polar questions fall straightforwardly under the witness generalization.

#+name: pol
#+begin_exe
\ex *A:* Does Andreea have a\(^x\) husband? *B:* Yes, she's married. He\(_x\)'s waiting outside.
\ex *A:* Does Andreea have a\(^x\) husband? *B:* ???No, she isn't married. He\(_x\)'s waiting outside.
#+end_exe

The question in the first conjunct has the following logical form:

#+name: lf
#+begin_exe
\ex \(?(\varepsilon_x \wedge H(x))\)
#+end_exe

It introduces two contextual alternatives (since negation is externally static):

- \(\set{(w,[x \to h])|h\text{ is Andreea's husband in }w}\)
- \(\set{(w,[])|\text{Andreea isn't married in }w}\)
  
If the alternative where Andreea isn't married is contextually eliminated, then subsequent anaphora will be licensed (but only then).

*** Defects

A big problem for [cite:@DotlacilRoelofsen2019] is anaphora in conjunctive questions:

#+name: conj-q
#+begin_exe
\ex Did you read a\(^x\) paper, and was it\(_x\) interesting?
#+end_exe

The reason is that the first conjunct introduces an alternative in which the \(x\) isn't familiar. 

This case is strikingly familiar to the following:

#+name: pol-q
#+begin_exe
\ex John might have read a\(^x\) paper, and he might have found it\(_x\) interesting.
#+end_exe

Indeed, without going into details [cite:@DotlacilRoelofsen2019] suggest that ([[conj-q]]) could be analyzed as a case of modal subordination [cite:@Roberts1989].[fn:5] 

Relatedly, since disjunction is internally static, [cite:@DotlacilRoelofsen2019] have no chance of accounting for data like the following:

#+name: wh-disj
#+begin_exe
\ex Is there no\(^x\) bathroom or is it\(_x\) upstairs?
\ex
\begin{xlist}
\ex Does Andreea not have a\(^x\) husband?
\ex No, she's married - he\(_x\)'s waiting outside.
\end{xlist}
#+end_exe

** Intervention effects

Possible intervenors [cite:@Beck2006]:

- Focus sensitive operators: /only/, /even/...
- Quantifiers: /every/, /no/, /most/, /few/, /always/, /never/...
- Negation.

Note that - crucially - there is an anaphoric relation between \(\varepsilon_x\) and \(?_x\) in the formation of a question.

In order to capture /intervention effects/, we can assume that, in a language such as German, the surface position of the /wh/-expression transparently reflects the scope of \(\varepsilon_x\).

In order to avoid the complexities of multiple /wh/, we'll consider an idealized case involving a single /wh/ in-situ.

#+name: 
#+begin_exe
\ex Mary didn't meet who?
\ex \(\neg(\varepsilon_x \wedge M(m,x)) \wedge \mathord{?_x}\)
#+end_exe

Since, \(\neg\) is externally static, \(?_x\) is unbound --- given some auxiliary assumptions, this is assumed to lead to oddness. This parallels:

#+name: neg
#+begin_exe
\ex Mary didn't meet anyone\(^x\). They\(_x\) are outside.
#+end_exe

For similar reasons, this approach does reasonably well at accounting for intervention effects caused by quantificational determiners, with an important caveat.

#+name: every
#+begin_exe
\ex Every boy met which who?
\ex \(\forall_x(B(x) \to \varepsilon_y \wedge M(x,y)) \wedge \mathord{?_x}\)
#+end_exe

As we learned in Filipe's class however, quantifiers aren't really externally static, so for this explanation to go through, we need to explain why \(?_x\) can't pick up a discourse plural as in the following.

#+name: d-plural
#+begin_exe
\ex Every sophomore someone\(^x\) (different). They\(_x\) were all freshmen.
#+end_exe

[cite:@DotlacilRoelofsen2021a] mention another problem for the dynamic approach to intervention effects: focus sensitive particles don't close off anaphoric information [cite:@Haida2007].

This is illustrated by ([[only]]) - anaphora is possible, even when /a paper/ takes scope below /only/ (the most salient reading, i.e., /John wrote a paper, and nobody else wrote any paper/):

#+name: only
#+begin_exe
\ex Only JOHN wrote a\(^x\) paper. It\(_x\) was long.
\ex Even JOHN wrote a\(^x\) paper. It was long.
#+end_exe

It might also initially seem tempting to apply the dynamic approach to intervention to intervention effects induced by disjunction in Japanese [cite:@Shibata2015], given that disjunction is typically externally-static.

#+begin_export latex
\begin{exe}
\ex[*]{
\gll
Ken-ka Erika-ga nani-o yon-da no.\\
Ken-or Erika-NOM what-ACC read-PST Q\\}
\ex
\gll
Nani-o Ken-ka Erika-ga yon-da no.\\
What-ACC Ken-or Erika-NOM read-PST Q\\
\end{exe}
#+end_export

A putative logical form for the intervention vs. non-intervention case:

#+name: lf-intervention
#+begin_exe
\ex \(((\varepsilon_x \wedge R(k,x)) \vee (\varepsilon_x \wedge R(e,x))) \wedge \mathord{?_x}\)
\ex \(\varepsilon_x \wedge (R(k,x) \vee R(e,x)) \wedge \mathord{?_x}\)
#+end_exe

This would fit quite nicely with the externally static disjunction of [cite:@GroenendijkStokhof1991], but - as we know - this is inadequate for natural language, and moreover [cite:@DotlacilRoelofsen2019] explicitly adopt an externally dynamic disjunction in order to capture cases like the following [cite:@Stone1992]:

#+name: program
#+begin_exe
\ex Bill either rented a\(^x\) blue car or a\(^x\) red car. It\(_x\) was probably a cabrolet.
#+end_exe

In fact, the putative intervention LF is exactly a case parallel to ([[program]]), involving co-indexed indefinites in each disjunct.

* Extension: inquisitive dynamic plural logic

[cite:@DotlacilRoelofsen2021] extend the basic semantics outlined in this section to a plural setting.

Instead of taking possibilities to be world-assignment pairs, they take them to be pairings of worlds with plural assignments \((w,G)\).

This is illustrated below, for an information state post introduction of a dref \(x\):

#+begin_export latex
\[
\begin{NiceArray}{rcccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet\\
   [x \to a],[x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
\begin{tikzpicture}
 \node[fit=(2-2) (2-3)] (2-23) {};
 \node[fit=(3-3) (3-4)] (3-34) {};
 \node[fit=(4-3)] (43) {};
 \draw[draw,inq] (2-23.north west) -- (2-23.north east) |- (3-34.north east) |- (3-34.south east) -| (43.south east) -- (43.south west) -- (3-34.north west) -- (2-23.south west) -- cycle;
\end{tikzpicture}
  \end{NiceArray}
\]
#+end_export

Departing from [cite:@vandenBerg1996], [cite:@DotlacilRoelofsen2021] assume that atomic sentences are interpreted /universally/ (see also [cite:@ChampollionEtAl2017a]).

#+begin_definition
*Support* (plural assignments).

- \(s \vdash P(x_1,\ldots,x_n) \iff \forall (w,G) \in s, \forall g \in G[g(x) \neq \star \to (g(x_1),\ldots,g(x_n)) \in I_w(P)]\)
#+end_definition

Plural random assignment needs to be defined as the cumulative generalization of random assignment, as Filipe discussed last week.

#+begin_definition
*Random assignment* (plural version).

- \(G[x]H \iff \forall g \in G,\exists h \in H, g[x]h \wedge \forall h \in H,\exists g \in G, g[x]h\)
- \(s[\varepsilon_x] := \set{(w,H)|(w,G) \in s \wedge G[x]H}\)
- \(C[\varepsilon_x] := \set{s[\varepsilon_x]|s \in C}\)
#+end_definition

Given the expressivity of plural assignments, there are a number of different ways in which the /witness identification operator/ \(?_x\) might be defined. [cite:@DotlacilRoelofsen2021] go for the following (quite complicated) definition:

#+begin_definition
*Witness identification operator* (plural).

- \(C[?_x] := \set{s \in C| \exists a[\forall w \in s_w,\exists G[(w,G) \in \mathbf{info}(C) \wedge  G_x = \set{a}]]}\)
#+end_definition

The intuition behind this is that \(?_x\) selects those states which contain enough information about the world to guarantee the existence of a unique value for \(x\) globally.

If we apply \(?_x\) to our previous context, it gives rise to two contextual alternatives.

#+begin_export latex
\[
\begin{NiceArray}{rcccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet\\
   [x \to a],[x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
\begin{tikzpicture}
 \node[fit=(2-2) (2-3)] (2-23) {};
 \node[fit=(3-3) (3-4)] (3-34) {};
 \node[fit=(4-3)] (43) {};
 \draw[draw,inq] (2-23.north west) -- (2-23.north east) |- (3-34.north east) |- (3-34.south east) -| (43.south east) -- (43.south west) -- (3-34.north west) -- (2-23.south west) -- cycle;
\end{tikzpicture}
  \end{NiceArray}
  \xRightarrow{?_x}
\begin{NiceArray}{rcccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet\\
   [x \to a],[x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
\begin{tikzpicture}
 \node[fit=(2-2) (2-3)] (2-23) {};
 \node[fit=(2-3)] (23) {};
 \node[fit=(3-3) (3-4)] (3-34) {};
 \node[fit=(4-3)] (43) {};
 \draw[draw,inq] (2-23.north west) -- (2-23.north east) -- (43.south east) -- (43.south west) -- (3-34.north west) -- (2-23.south west) -- cycle;
 \draw[draw,inq] (23.north west) -- (23.north east) |- (3-34.north east) |- (3-34.south east) -| (43.south east) -- (43.south west) -- cycle;
\end{tikzpicture}
  \end{NiceArray}
\]
#+end_export

Note that resolving the issue raised by \(?_x\) does not necessarily uniquely specify the value of \(G_x\). This derives the /mention some/ reading of /wh/-questions.

#+name: french
#+begin_exe
\ex What is a famous french dish?
\ex \(\varepsilon_x \wedge Fd(x) \wedge \mathord{?_x}\)
#+end_exe

In order to derive the /mention-all/ reading, [cite:@DotlacilRoelofsen2021] make use of a maximization operator.

#+begin_definition
*Maximization*. The maximization operator (relative to a variable \(x\)) keeps around states in \(C\) which where the value collectively assigned to \(x\) is maximal relative to the information about \(x\) in \(C\) globally.

- \(C[\mathbf{max}_x] := \set{s \in C | \forall (w,G) \in s, \forall (w,G') \in \mathbf{info}(C)[G'(x) \subseteq G(x)]}\)
#+end_definition

#+begin_export latex
\[
\begin{NiceArray}{rcccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet\\
   [x \to a],[x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
\begin{tikzpicture}
 \node[fit=(2-2) (2-3)] (2-23) {};
 \node[fit=(3-3) (3-4)] (3-34) {};
 \node[fit=(4-3)] (43) {};
 \draw[draw,inq] (2-23.north west) -- (2-23.north east) |- (3-34.north east) |- (3-34.south east) -| (43.south east) -- (43.south west) -- (3-34.north west) -- (2-23.south west) -- cycle;
\end{tikzpicture}
  \end{NiceArray}
  \xRightarrow{\mathbf{max}_x}
\begin{NiceArray}{rcccc}
    & w_{a} & w_{ab} & w_b & w_\emptyset \\
   [x \to a] & \bullet  & \bullet & \bullet & \bullet \\
   [x \to b] & \bullet  & \bullet & \bullet & \bullet\\
   [x \to a],[x \to b] & \bullet  & \bullet & \bullet & \bullet
  \CodeAfter
\begin{tikzpicture}
 \node[fit=(2-2)] (22) {};
 \node[fit=(3-4)] (34) {};
 \node[fit=(4-3)] (43) {};
 \draw[draw,inq] (22.north west) -| (43.north west) -| (34.north west) -- (34.north east) -- (34.south east) -| (43.south east) -- (43.south west) |- (22.south west) -- cycle;
\end{tikzpicture}
  \end{NiceArray}
  \]
#+end_export

Before applying \(?_x\), let's consider the inquisitive context we're dealing with:

#+name: state
#+begin_exe
\ex \(P(\set{(w_a,\set{[x \to a]}),(w_b,\set{[x \to b]}),(w_{ab},\set{[x \to a],[x \to b]})})\)
#+end_exe

Applying \(?_x\) at \(C\) will give us the states \(s \in C\) which satisfy the following property: there is some individual \(a\), s.t. every world in \(s\) is paired with some plural assignment \(G \in \mathbf{info}_a(C)\) s.t. \(G_x = \set{a}\). 

Crucially any state containing \(w_{ab}\) will fail to satisfy this property. 

This derives a uniqueness inference:

#+name: mention-all
#+begin_exe
\ex Which\(^x\) linguist is giving a talk?
\ex \(\varepsilon_x \wedge L(x) \wedge T(x) \wedge \mathbf{max}_x \wedge \mathord{?_x}\)
#+end_exe

** Q-subordination with questions

One possible motivation (not discussed by [cite:@DotlacilRoelofsen2021]):

#+name: pair-list-Q
#+begin_exe
\ex Which\(^x\) book did each\(^y\) boy read, and did they\(^y\) each enjoy it\(_x\)?
#+end_exe
  





#+print_bibliography:

* Footnotes
[fn:5] On Wednesday, in my LFRG presentation, I'll explore a different way of thinking about the projection/accessibility properties of sentences such as ([[pol-q]]), by treating epistemic modals as filters in the sense of [cite:@Karttunen1973]. It's possible that a similar strategy may be feasible for ([[conj-q]]), but I leave this to future work. 

[fn:4] The analysis (roughly) is that ellipsis of a clause is possible if it stands in a mutual dynamic entailment relation (modulo focus) with its antecedent.
[fn:3] Here we make use of an equivalence relation over possibilities \(\sim_x\), which is defined as follows:

\[(w,g) \sim_x (w',h) \iff g_x = h_x\]

Crucially, it's not necessary that \(w = w'\).

[fn:2] We assume the standard definition of random assignment for states:

\[s[\varepsilon_x] := \set{(w,h)|g[x]h \wedge (w,g) \in s}\]

[fn:1] A set \(C\) is /downward closed/ iff for each element \(s \in C\), subsets of \(s\) are necessarily elements of \(C\) too (including the empty set!).

* File local variables                                             :noexport:
 
# Local Variables:
# mode: org
# org-latex-default-packages-alist: nil
# org-latex-with-hyperref: nil
# End:

