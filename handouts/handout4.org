#+title: Externally-dynamic dynamic semantics ii
#+author: Patrick D. Elliott 
#+bibliography: ../../bibliography/master.bib
#+setupfile: handout-template.org
#+OPTIONS: ':t
#+cite_export: biblatex

* Summary of EDS

** Background

Inter-related problems for first-generation theories of dynamic semantics (FCS, DPL, etc.):

- Exceptions to accessibility generalizations.
- Non-classicality (neither double negation elimination nor de Morgan's laws valid).
- Anaphoric information flow is pre-compiled into the semantics of logical expressions (Schlenker's problem).
- Sententialist mode of composition; dynamics is the exclusive purview of the propositional type.

Ingredients of EDS:

- A strictly more expressive notion of content than first-generation theories.  
- A general recipe for systematically lifting a static Montagovian fragment into a dynamic setting [cite:@Charlow2014][fn:9].
- A trivalent, /Strong Kleene/ semantics for the logical connectives; arguably what's minimally needed to account for presupposition projection.
  
 #+begin_importantblock
*The pay-off:* an (arguably) empirically and conceptually superior foundation. EDS is intended to be a /bona fide/ evolution of the program begun by FCS, which we'll build on in several weeks time.
#+end_importantblock

Signature features of EDS:

- A distinction emerges between /positive/ and /negative/ anaphoric information; /Egli's theorem/ (the essence of DS) only valid with respect to /positive/ anaphoric information.
- More classical behaviour: double negation elimination and de Morgan's laws are valid. 
- The semantics is permissive when it comes to predictions regarding accessibility; some of the restrictiveness of the theory emerges out of a consideration of independently motivated pragmatic constraints on, e.g., disjunction.
- A weak, /existential/ semantics is predicted for donkey sentences (i.e., unlike in DPL, Egli's corrolary doesn't hold).
  
** Compositionality

Propositional types as a respository of anaphoric information in DPL:

#+name: def:oldtype
#+begin_exe
\ex \(T := g \to \set{g}\)
#+end_exe

A general recipe for dynamic types in EDS.[fn:1][fn:2]

#+name: def:type
#+begin_exe
\ex \(D\ a := g \to \set{a \times g}\)
#+end_exe

The base grammar is pure Montague:

#+name: ex:classic
#+begin_exe
\ex \(\mathbf{John} : t\)
\ex \(\mathbf{swim} : e \to  t\)
\ex \(\mathbf{not} : t \to t\)
#+end_exe

In order to allow the base grammar to interact with inherently dynamic expressions (basically: indefinites and definites), we make use of a combinator /pure/: 

#+begin_definition
*Pure* lifts an \(a\) into a trivially dynamic \(a\).

\[\begin{aligned}[t]
\eta(a) := \lambda g\,.\,\set{(a,g)}&&\eta : a \to D\ a
\end{aligned}\]
#+end_definition

Alongside function-argument application, we allow for a fundamentally /dynamic/ mode of composition, formalized as \(\fap\) and \(\bap\). This is essentially a generalization of DPL conjunction. 

#+begin_definition
*Dynamic forwards/backwards function application*.

\[\begin{aligned}
m \fap n := \lambda g\,.\,\bigcup\limits_{(f,g') \in m(g)}\set{(f(x),g'')|(x,g'') \in n(g')}&&(\fap) : D\ (a \to b) \to D\ a \to D\ b\) \\
m \bap n := \lambda g\,.\,\bigcup\limits_{(x,g') \in m(g)}\set{(f(x),g'')|(f,g'') \in n(g')}&&(\bap): D\ a \to D\ (a \to b) \to D\ b
\end{aligned}\]
#+end_definition

The flow of anaphoric information is assumed to be conditioned by the linear ordering of sisters (but feel free to plug in your favourite structure-sensitive notion; [cite:@Privoznov2021]).

#+begin_export latex
\begin{exe}
\ex
\(\eval*{\begin{array}{c}
\begin{forest}
[{\(\gamma\)}
  [{\(\alpha_{d\ (a \to b)}\)}]
  [{\(\beta_{d\ a}\)}]
]
\end{forest}
\end{array}} = \eval*{\alpha } \fap \eval*{\beta }\)
\ex
\(\eval*{\begin{array}{c}
\begin{forest}
[{\(\gamma\)}
  [{\(\alpha_{d\ a}\)}]
  [{\(\beta_{d\ (a \to b)}\)}]
]
\end{forest}
\end{array}} = \eval*{\alpha } \bap \eval*{\beta }\)
\end{exe}
#+end_export

**  Pronouns and partiality

Pronouns introduce input-sensitivity into the fragment.

#+name: def:eds-pron
#+begin_exe
\ex \(\mathbf{she}_v := \lambda g\,.\,\set{(g_v,g)}\)\hfill\(D\ e\)
#+end_exe

In order to model Heim's notion of familiarity, we assume that assignments are /partial/. Concretely, assignments are total functions from \(V\) to \(D \cup \#_e\).

We assume that if any of a predicates arguments is valued \(\#_e\), it returns *maybe* (the third truth value).

#+name: def:tri
#+begin_exe
\ex \(D_t = \set{\mathbf{yes},\mathbf{no},\mathbf{maybe}}\)
#+end_exe

Composition with a pronoun is simple.

#+name: pron1
#+begin_exe
\ex she\(_v\) sat down.\\
\(\mathbf{she}_v \bap \eta(\mathbf{sat.down}) \begin{aligned}[t]
&= \lambda g\,.\,\set{(\mathbf{satdown}(g_v),g)}\\
&= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g)|g_v \neq \#_e \wedge \mathbf{satDown}(g_v)}\\
&\cup \set{(\mathbf{no},g)|g_v \neq \#_e \wedge \neg\mathbf{satDown}(g_v)}\\
&\cup \set{(\mathbf{maybe},g)|g_v = \#_e}
\end{aligned}
\end{aligned}\)
#+end_exe

** Indefinites: random assignment and closure

Indefinites are defined out of two component parts: (i) DPL-style random assignment, (ii) a closure operator \(\dag\) which filters out negative anaphoric information.

#+begin_definition
*Random assignment in EDS* (wrt a restrictor \(r\)).

\[\begin{aligned}[t]
\varepsilon^{v}(r) = \lambda k\,.\,\lambda g\,.\,\bigcup\limits_{r(x)}k(x)(g^{[v \to x]})&&(e \to t) \to  (e \to D\ t) \to D\ t
\end{aligned}\]
#+end_definition

An example of this in action (not the final proposal for indefinites):

#+name: ex:rand
#+begin_exe
\ex \(\varepsilon^v(\mathbf{ling})(\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{swims}(x),g)})\)\hfill\(D\ t\)
\ex \(= \lambda g\,.\,\set{(\mathbf{swim}(x),g^{[v \to x]})|\mathbf{ling}(x)}\)
\ex \(= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge  \neg\mathbf{swim}(x)}
\end{aligned}\)
#+end_exe

Some auxiliary notions useful for defining closure (and elsewhere):

#+begin_definition
*Positive/negative anaphoric information*.

\[\begin{aligned}[t]
&\mathbf{A}^+_g(p) := \set{h | (\mathbf{yes},h) \in p(g)}&&D\ t \to \set{g}\\
&\mathbf{A}^-_g(p) := \set{h | (\mathbf{no},h) \in p(g)}
\end{aligned}\]
#+end_definition

#+begin_definition
*Truth, falsity, and the absence of either* in EDS.

\[\begin{aligned}[t]
&\mathbf{true}_g(p) := \mathbf{A}^+_g(p) \neq \emptyset\\
&\mathbf{false}_g(p) := \mathbf{A}^+_g(p) = \emptyset \wedge \mathbf{A}^-_g(p) \neq \emptyset\\
&\mathbf{neither}_g(p) := \mathbf{A}^+_g(p) = \emptyset \wedge \mathbf{A}^-_g(p) = \emptyset 
\end{aligned}\]
#+end_definition

Positive closure allows anaphoric information to pass unharried if the argument is classicaly true, and filters it out otherwise.

#+begin_definition
*Positive closure in EDS*.

\[\begin{aligned}[t]
\dag(p)(g) := \begin{aligned}[t]
&\set{(\mathbf{yes},h) \in p(g)}\\
&\cup \set{(\mathbf{no},g)|\mathbf{false}_g(p)}\\
&\cup \set{(\mathbf{maybe},g)|\mathbf{neither}_g(p)}
\end{aligned}&&\dag : D\ t \to D\ t
\end{aligned}
\]
#+end_definition

Indefinites are the composition of random assignment and positive closure:

#+name: def:indef-final
#+begin_exe
\ex \(\mathbf{a.ling}^v := \lambda k\,.\,\dag(\varepsilon^v(\mathbf{ling})(k))\)\hfill\((e \to D\ t) \to D\ t\)
#+end_exe 

Indefinites, unlike pronouns, take scope:

#+name: ex:indef-final
#+begin_exe
\ex \(\mathbf{a.ling}^v\ (\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{swim}(x),g)})\)
\ex \(= \dag(\varepsilon^v(\mathbf{ling})(\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{swim}(x),g)}))\)
\ex \(= \lambda g\,.\,\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)} \cup \set{(\mathbf{no},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{swim}(x)]}\)
#+end_exe

** In-scope dynamic binding

#+begin_export latex
\begin{exe}
\ex Some\(^v\) linguist likes her\(_v\) mother.\\
\begin{forest}
          [{$\dag(\lambda g\,.\,\set{(\mathbf{likes}(\mathbf{mother.of}(x))(x),g^{[v \to  x]})|\mathbf{ling}(x)})$}
          [{$\dag(\varepsilon^{n}(\mathbf{ling})(\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{likes}(\mathbf{mother}(g_{v}))(x),g)}))$}
            [{$(e \to D\ t) \to D\ t$} [{some$^{v}$ linguist},roof]]
            [{$e \to D\ t$}
            [{$\lambda x$}]
            [{$\lambda g\,.\,\set{(\mathbf{likes}(\mathbf{mother}(g_{v}))(x),g)}$}
            [{$D\ t$\\$\bap$}
            [{$D\ e$\\$\eta(t_{x})$}]
            [{$D\ (e \to t)$\\$\fap$}
              [{$D\ (e \to e \to t)$\\$\eta(\mathbf{likes})$}]
              [{$D\ e$} [{his$_{v}$ mother},roof]]
            ]
          ]]]]]
        \end{forest}
\end{exe}
#+end_export

** Logical connectives

*** Negation

Schema for composing negation:

#+begin_export latex
\begin{forest}
[{\(D\ t\)\\\(\fap\)}
  [{\(D\ (t \to t)\)\\\(\eta(\mathbf{not})\)}]
  [{\(D\ t\)\\\(p\)}]
]
\end{forest}
#+end_export

Predicted semantic effect:

#+name: ex:neg
#+begin_exe
\ex \(\eta(\mathbf{not}) \fap p\)
\ex \(= \lambda g\,.\,\set{(\neg_s(t),h)|(t,h) \in p(g)}\)
#+end_exe

Example:

#+name: no-ling
#+begin_exe
\ex \(\eta(\mathbf{not}) \fap (\mathbf{a.ling}^v (\lambda x\,.\,\eta(\mathbf{swims}(x))))\)
\ex \(= \lambda g\,.\,\set{\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swims}(x)} \cup \set{(\mathbf{yes},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{swims}(x)]}\)
#+end_exe

#+begin_fact
The positive anaphoric information of a negated sentence is the negative anaphoric information of the embedded sentence:

\[\mathbf{A}^+_g(\eta(\mathbf{not}) \fap m) = \mathbf{A}^-_g(m)\]
#+end_fact

Because of closure, this makes a negated existential statement anaphorically inert (external staticity of negation in DPL).[fn:10] 

This also guarantees that double-negation elimination is valid.

#+begin_fact
Double-negation elimination is valid in EDS.

\[\eta(\mathbf{not}) \fap \eta(\mathbf{not}) \fap p = p\]
#+end_fact

N.b. that random assignment isn't fit for purpose as a semantics for indefinites in EDS, since:

#+begin_fact
Negation commutes with random assignment in EDS.

\[\eta(\mathbf{not}) \fap \varepsilon^v(f)(k) = \varepsilon^v(f)(\lambda x\,.\,\eta(\mathbf{not}) \fap k(x))\]
#+end_fact

*** Binary connectives and information flow


Composition schema for a binary, truth-functional connectives \(R\):

#+begin_export latex
\begin{exe}
\ex
\begin{forest}
  [{\(D\ t\)\\\(\bap\)}
    [{\(D\ t\)\\\(p\)}]
    [{\(D\ (t \to t)\)\\\(\fap\)}
      [{\(D\ (t \to t \to t)\)\\\(\eta(R)\)}]
      [{\(D\ t\)\\\(q\)}]
    ]
  ]
\end{forest}
\end{exe}
#+end_export

Anaphoric information flow tracks the linear order of juncts, by dint of \(\fap\) and \(\bap\).

*** Conjunction and discourse anaphora

A strong Kleene semantics for conjunction:

- Verification conditions are strong.
- Falsification conditions are weak (i.e., *maybe* is permitted).

#+begin_export latex
\begin{figure}[H]
\begin{tabular}{l|ccc}
      $\wedge _{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{no}$  & $\mathbf{no}$  & $\mathbf{no}$ & $\mathbf{no}$\\
      $\mathbf{maybe}$ & $\mathbf{maybe}$ & $\mathbf{no}$ & $\mathbf{maybe}$\\
  \end{tabular}
  \caption{Strong Kleene conjunction}
\end{figure}
#+end_export

Consequence: Egli's theorem holds in EDS but only with respect to positive anaphoric information!

One way to illustrate this is to consider "A linguist entered and she sat".

#+name: egli-illustration.
#+begin_exe
\ex \((\mathbf{a.ling}^v(\lambda x\,.\,\eta(\mathbf{entered}(x)))) \bap (\eta(\mathbf{and}) \fap (\mathbf{she}_v \bap \eta(\mathbf{sat})))\)
\ex \(= \lambda g\,.\,\set{(t \wedge_s u,i)|\exists h[(t,h) \in \dag(\lambda g\set{(\mathbf{entered}(x),g^{[v \to x]})|\mathbf{ling}(x)})(g) \wedge (u,i) \in \set{(\mathbf{sat}(h_v),h)}]}\)
\ex \(= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge  \mathbf{entered}(x) \wedge \mathbf{sat}(x)}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})| \mathbf{ling}(x) \wedge \mathbf{entered}(x) \wedge \neg\mathbf{sat}(x)}\\
&\cup \set{(\mathbf{no},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{entered}(x)]}
\end{aligned}\)
#+end_exe

- The positive information that \(v\) is a linguist who entered and sat down is introduced, if there is a linguist who entered and sat down.
- If there is a linguist who entered and didn't sit down, negative information that \(v\) is a linguist who entered and didn't sit down is introduced.

*** Disjunction and bathroom sentences

A strong Kleene semantics for disjunction:

- Falsification is strong (*maybe* isn't permitted).
- Verification is weak (crucial for bathroom sentences!).

#+begin_export latex
\begin{figure}[H]
\begin{tabular}{l|ccc}
      $\vee_{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{yes}$ & $\mathbf{yes}$\\
      $\mathbf{no}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{maybe}$ & $\mathbf{yes}$ & $\mathbf{maybe}$ & $\mathbf{maybe}$\\
  \end{tabular}
\caption{Strong Kleene disjunction}
\end{figure}
#+end_export

#+name: ex:bathroom
#+begin_exe
\ex Either there's no\(^v\) bathroom or it\(_v\)'s upstairs.
\ex \(p_1: \dag(\lambda g\,.\,\set{(\mathbf{bathroom}(x),g^{[v \to x]})|x \in D})\)
\ex \(q_2: \lambda g\,.\,\set{(\mathbf{upstairs}(g_v),g)}\)
\ex \(\(p_1 \bap (\eta(\mathbf{or}) \fap q_2)\)
\ex \(= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g)|\neg\exists x[\mathbf{bathroom}(x)]}\\
&\cup \set{(\mathbf{yes},g^{[v \to x]})|\mathbf{bathroom}(x) \wedge \mathbf{upstairs}(x)}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})|\mathbf{bathroom}(x) \wedge \neg\mathbf{upstairs}(x)}
\end{aligned}\)
#+end_exe

Another way of thinking about it:

#+begin_noteblock
*Scenario 1 (verification):* there's no bathroom. The second disjunct never effects the truth-value (thanks to Strong Kleene disjunction), nor introduces any discourse referents.
#+end_noteblock

#+name: ver1
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{yes} \vee_{s} u,h)|(u,h) \in  \set{(\mathbf{upstairs}(g_{v}),g)}}\)
#+end_exe

#+begin_noteblock
*Scenario 2 (verification/falsification):* There is a bathroom. The first disjunct introduces a /negative/ discourse referent - the second disjunct makes the discourse referent positive if the bathroom is upstairs, and negative otherwise.
#+end_noteblock

#+name: ver2
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{no} \vee_{s} u,h)|\exists x[\mathbf{bathroom}(x) \wedge  (u,h) \in  \set{(\mathbf{upstairs}(x),g^{[v \to x]})}]}\)
#+end_exe

Failure of uniqueness in bathroom disjunctions:

#+name: sage
#+begin_exe
\ex Either Sally didn't buy a\(^v\) sage plant, or she bought 8 others along with it\(_v\).
#+end_exe

#+name: defeasible
#+begin_exe
\ex A: Either there is no bathroom, or it's upstairs.\\
B: That's true - in fact there are two bathrooms upstairs.
B: ?That's false - there are two bathrooms upstairs.
#+end_exe

*** Donkey anaphora

#+begin_export latex
\begin{figure}[H]
\begin{tabular}{l|ccc}
      $\rightarrow_{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{no}$  & $\mathbf{yes}$  & $\mathbf{yes}$ & $\mathbf{yes}$\\
      $\mathbf{maybe}$ & $\mathbf{yes}$ & $\mathbf{maybe}$ & $\mathbf{maybe}$\\
  \end{tabular}
  \caption{Strong Kleene implication}
\end{figure}
#+end_export

Let's see how this handles donkey anaphora in a sentence such as the following:

#+name: donkey1
#+begin_exe
\ex If any\(^v\) linguist is outside, then they\(_v\) are happy.
#+end_exe

#+name: if1
#+begin_exe
\ex \(p_1: \dag(\lambda g\,.\,\set{(\mathbf{outside}(x),g^{[v \to x]})|\mathbf{ling}(x)})\)
\ex \(q_2: \lambda g\,.\,\set{(\mathbf{happy}(g_v),g)}\)
\ex \(p_1 \bap (\eta(\mathbf{if.then}) \fap q_2)\)
\ex \(= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{outside}(x) \wedge \mathbf{happy}(x)}\\
&\cup \set{(\mathbf{no},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{outside}(x)]}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{outside}(x) \wedge \neg\mathbf{happy}(x)}
\end{aligned}\)
#+end_exe

Another way of thinking about this, in terms of verification/falsification strategies encoded by Strong Kleene implication.

#+begin_noteblock
*Scenario 1 (verification/falsification):* Someone is outside. The antecedent introduces a \textit{positive} discourse referent --- the consequent makes the discourse referent positive if they are happy, and negative if not.
#+end_noteblock

#+name: if-ver
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{yes} \rightarrow_{s} u,h)|\exists x[\mathbf{ling}(x) \wedge  \mathbf{outside}(x) \wedge  (u,h) \in  \set{(\mathbf{happy}(x),g^{[v \to  x]})}]}\)
#+end_exe

#+begin_noteblock
*Scenario 2 (verification):* Nobody is outside. The consequent never effects the truth-value, nor introduces any discourse referents:
#+end_noteblock

#+name: if-ver2
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{no} \rightarrow_{s} u, h)|(u,h) \in  \set{(\mathbf{happy}(g_{v}),g)}}\)
#+end_exe

#+begin_importantblock
*Prediction:* donkey sentences have weak, existential truth-conditions, i.e., ([[donkey1]]) is true just so long as a linguist is outside and happy; the existence of a linguist outside who is unhappy doesn't falsify the sentence, under this reading.
#+end_importantblock

Egli's corrolary doesn't hold in EDS. Rather, we end up with something weaker. In EDS, \(\exists x,p \to q\) is equivalent to \(\neg\exists x,p \vee q\), or \(\neg(\exists x,p \wedge \neg q)\).

#+name: 
#+begin_exe
\ex If any\(^v\) linguist is outside, they\(_v\) are unhappy.
\ex Either no\(^v\) linguist is outside, or they\(_v\) are happy.
\ex It's not the case that a\(^v\) linguist is outside, and they\(_v\) are unhappy.
#+end_exe

As we discussed last time, being able to generate weak truth-conditions for donkey sentences is desirable.

#+name: donkey-weak
#+begin_exe
\ex If Gennaro had a\(^v\) credit card, he paid with it\(_v\).
\ex Either Gennaro doesn't have a\(^v\) credit card, or (he has a\(^v\) credit card and) he paid with it.
#+end_exe

#+begin_warningblock
*Strong readings.* At worst, EDS is on a par with first-generation dynamic theories, which only derive strong readings. Arguably, the situation is a little better, since we want our semantics to be compatible with the weakest attested readings. In [cite:@Elliott2020g], I explore the possibility of deriving the strong reading as an implicature, via mechanisms motivated by free choice and homogeneity [cite:@Bar-Lev2018;@Bar-LevFox2017]. We won't have time  to explore this today, but if there is general interest, I can talk more about the landscape of weak/strong readings in several weeks time.
#+end_warningblock

*** Outstanding issues

How does the compositional theory of EDS give rise to predictions about anaphora in /discourse/? 

We need a concrete theory of the semantics-pragmatics bridge in order to make EDS into a predictive theory, regarding how assertions add anaphoric information to the discourse context.

#+begin_tipblock
It turns out that, once we intensionalize EDS, we can retain a completely orthodox notion of file contexts from [cite:@Heim1982;@Heim1983a].
#+end_tipblock

Since sentences can return *maybe*, depending on the evaluation point, we have essentially incorporated semantic presuppositions qua definedness conditions into our theory - this interacts with assertion in /exactly/ the way that we're familiar with.

* Pragmatics, and the problem of too many discourse referents

The moniker EDS was chosen because nothing in the semantics of the logical operators blocks anaphoric information.[fn:11] 

This means that, e.g., disjunctive sentences are both externally and internally /dynamic/ as far as the semantics is concerned.

But, wait a minute! Let's think back to the motivations for DPL disjunction. To see the problem, consider the following:

#+name: ignorance1
#+begin_exe
\ex Either this house hasn't been renovated, or there's a\(^v\) bathroom.\\
??It\(_v\)'s upstairs.
#+end_exe

Suppose there is in fact exactly one bathroom $b$. Don't we predict that the disjunctive sentence will introduce a positive /bathroom/ discourse referent, and anaphora will be licensed (because verification conditions are week)? 


#+name: ignorance1'
#+begin_exe
\ex \(\lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{bathroom}(x)}\\
&\cup \set{(\mathbf{yes},g)|\neg\mathbf{renovated}(h) \wedge \neg\exists x[\mathbf{bathroom}(x)]}\\
&\cup \set{(\mathbf{no},g)|\mathbf{renovated}(h) \wedge \neg\exists x[\mathbf{bathroom}(x)]\}
\end{aligned}\)
#+end_exe

A similar problem arises negated conjunctions.

#+name: ignorance2
#+begin_exe
\ex It's not the case that this house has been renovated and there's no\(^v\) bathroom.\\ ??It\(_v\)'s upstairs.
#+end_exe

In fact, by de Morgan's laws (which are valid in EDS), this should be equivalent to the disjunction above.

In fact, the problem even arises for donkey sentences. It's fully general.

#+name: ignorance3
#+begin_exe
\ex If this house has been renovated then there's a\(^v\) bathroom.\\
??It\(_v\)'s upstairs.
#+end_exe

#+begin_warningblock
As we've seen however, we don't want to build external staticity into the semantics of the logical operators, as this leads to a dilemma, both conceptual and empirical.
#+end_warningblock

#+begin_tipblock
In each of these cases, I'll suggest we can adopt the same (pragmatic) solution, building on an observation by [cite:@Rothschild2017]. After each initial assertion in ([[ignorance1]],[[ignorance2]],[[ignorance3]]), there is no contextual certainty about the existence of a witness for the pronoun.
#+end_tipblock

**  Rothschild discourses: contextual entailment and anaphora

In a discourse with an asserted disjunctive sentence, if the truth of the disjunct containing an indefinite is later contextually entailed, anaphora becomes possible [cite:@Rothschild2017]. Here, we generalize Rothschild's observation.

*Context:* The director of a play (A) has lost track of time, and doesn't know what day it is. The director is certain, however, that on Saturday and Sunday, different critics will be in the audience, and utters the disjunctive sentence in ([[ex:ignorance1a]]). A's assistant (B), knows what day it is, and utters the sentence in ([[ex:ignorance1b]]), which contextually entails the second disjunct. Subsequently, anaphora is licensed in ([[ex:ignorance1c]]).

#+name: ignorance
#+begin_exe
\ex A: Either it's a weekday, or a\(^v\) critic is watching our play.<<ex:ignorance1a>>
\ex B: It's Saturday.<<ex:ignorance1b>>
\ex A: They\(_v\)'d better give us a good review.<<ex:ignorance1c>>
#+end_exe

We can make the same point for conditionals.

#+name: ignoranc
#+begin_exe
\ex A: If it's the weekend, then a\(^v\) critic is watching our play.
\ex B: It's Saturday.
\ex A: Then, they\(_v\)'d better give us a good review.
#+end_exe

And for negated conjunctive sentences, with a little bit of elbow grease:

#+name: neg-conj
#+begin_exe
\ex A: There's no way that it's the weekend and NO critic is watching our play.
\ex B: It's Saturday.
\ex: A: Then, they\(_v\)'d better give us a good review.
#+end_exe

So, there are indeed cases in which the external dynamicity of EDS makes /good/ predictions.

#+begin_tipblock
*Resolution:* Complex sentences can give the illusion of external staticity, given the conversational backgrounds against which they can be felicitously uttered.
#+end_tipblock

** A Heimian pragmatics for EDS

Heimian file contexts are sets of world-assignment pairs. First, we need to intensionalize EDS.

A dynamic \(a\) is a function from a world-assignment pair, to a \(a\)-world-assignment triple.

#+name: def:newtype
#+begin_exe
\ex \(D\ a := s \times g \to \set{a \times s \times g}\)
#+end_exe

Predicates are world-sensitive in an intensional setting, they can be lifted into a dynamic setting via a modified pure (\(\pi \)):

#+name: int-pure
#+begin_exe
\ex \(\pi(a) := \lambda (w,g)\,.\,\set{(a(w),w,g)}\)\hfill \((s \to a) \to D\ a\)
#+end_exe

Everything else can remain the same, aside from some minor tweaks to keep track of the world of evaluation.

We'll assume the notion of a /file context/ we developed for partial FCS.

#+begin_definition
File contexts. A file context is a set of world-assignment pairs, where assignments are total functions from variables to \(D \cup \set{\#_e}\).

- Initial context \(c_\top\) : \(W \times \set{(g_\top)}\)
- Absurd context \(c_\emptyset \): \(\emptyset \)
#+end_definition

As usual, we need a bridge principle. This turns out just to be a generalization of Stalnaker's bridge [cite:@vonFintel2008], generalized to a setting where we keep track of anaphoric as well as worldly information.[fn:12] 

#+begin_definition
Update in EDS.

\[c[\phi] = \begin{cases}
    \bigcup\limits_{(w,g) \in  c}\mathbf{A}^{+}_{w,g}(\phi)&\forall (w,g) \in  c[\mathbf{true}_{w,g}(\phi) \vee \mathbf{false}_{w,g}(\phi)]\\
    \text{undefined}  &\text{otherwise}
    \end{cases}
\]
#+end_definition

#+begin_importantblock
It's worth emphasizing here that this bridge principle is completely orthodox, and is independently motivated by dint of how /presuppositional/ expressions interact with natural language pragmatics. For example, it predicts that \(c[\text{Josie stopped smoking}]\) is defined iff \(c\) entails that Josie used to smoke, assuming that \(\eval{Josie stopped smoking}\) maps worlds to *maybe*, in which Josie never smoked[fn:13].
#+end_importantblock

N.b.: the familiarity presupposition [cite:@Heim1991] is derived in the same way as in partial FCS. Pronouns indexed \(v\) impose a universal requirement on assignments of the file context (namely, that they be defined at \(v\)).

** External staticity via ignorance

Disjunctive sentences place a requirement on the context - an utterance of a sentence of the form "$p$ or $q$"" is only felicitous if both $p$ and $q$ are /real/ possibilities, i.e., the context shouldn't entail the truth/falsity of either of the disjuncts.

#+name: audience
#+begin_exe
\ex Context: /we know that someone was in the audience/.\\
??Either someone was in the audience or the event was a disaster.
#+end_exe

We can use this fact to account for the apparent external staticity of disjunction. Consider the following space of logical possibilities, representing a conversational background against which the disjunctive sentence may be uttered:

- \(w_{ad}\): \(a\) was in the audience, and the event was a disaster.
- \(w_{a\neg d}\): \(a\) was in the audience, and the event wasn't a disaster.
- \(w_{\emptyset d}\): nobody was in the audience, and the event was a disaster.
- \(w_{\emptyset \neg d}\): nobody was in the audience, and the event wasn't a disaster.
  
And consider the following sentence:

#+name: audience2
#+begin_exe
\ex Either someone\(^v\) was in the audience, or the event was a disaster.
#+end_exe

The positive anaphoric information associated with the disjunctive sentence, relative to an assignment world pair \(w,g\):

#+name: disj-pos
#+begin_exe
\ex \(\begin{aligned}[t]
  &\set{(w,g^{[v \to x]}) | \mathbf{audience}_{w}(x)}\\
  &\cup \set{(w,g) | \neg\exists x[\mathbf{audience}_{w}(x)] \wedge  \mathbf{disaster}_{w}(\mathbf{event})}\\
  \end{aligned}\)
#+end_exe

We can now consider the result of updating the initial information state with the disjunctive sentence. Note that the bridge principle is trivially satisfied, since the sentence doesn't contain any free variables.

#+name: result
#+begin_exe
\ex \(\Set{\begin{aligned}[c]
    &(w_{ad},[v \to  a]),\\
    &(w_{a\neg d},[v \to a],\\
    &(w_{\emptyset d},g_{\top}),\\
  \end{aligned}}\)
#+end_exe

#+begin_warningblock
The resulting information state is one in which \(v\) is /not familiar/! This means that the presupposition of a subsequent sentence with a matching free variable won't be satisfied.
#+end_warningblock

This account correctly captures the contextual entailment facts: an intermediate assertion can eliminate the world-assignment pair \((w_{\emptyset },g_{\top})\), thus rendering \(v\) familiar.[fn:5]

#+name: audience3
#+begin_exe
\ex A: Either someone\(^v\) was in the audience, or the event was a disaster.
\ex B: Actually, the auditorium wasn't empty.
\ex A: In that case, I hope they\(_v\) enjoyed it.
#+end_exe

** Program disjunction

The data which motivated Groenendijk \& Stokhof to posit a distinct entry for disjunction - program disjunction - are already accounted for by EDS.

#+name: program
#+begin_exe
\ex Either a\(^v\) linguist is here, or a\(^v\) philosopher is. (Either way) I hope they\(_v\) found the class interesting.
#+end_exe

The union of the two different ways of dynamically verifying the disjunctive sentence gives us its positive extension.  The salient point to note here is that the output set /only/ contains assignments at which \(v\) is defined.

N.b. that in order to avoid the downdate problem, we might want to define a /guarded/ version of random assignment [cite:@vandenBerg1996]. See [cite:@Elliott2020g] for details. This doesn't affect the account.

#+begin_importantblock
To my knowledge, this is the first analysis of disjunction in dynamic semantics which straightforwardly captures both bathroom disjunctions and examples motivating program disjunction in a straightforward fashion.
#+end_importantblock

** External staticity more generally 

Restrictions on anaphora from negated conjunctions are accounted for, by the same logic as disjunction: utterances of the form "not (\(p\) and \(q\))" imply that "not \(p\)" and "not \(q\)" are real possibilities.

Context: /we know that someone was in the audience/.

#+name: conj
#+begin_exe

\ex Context: /we know that someone was in the audience/.\\
??There's no way that nobody was in the audience, and the event WASN'T a disaster.
#+end_exe

Likewise for conditional assertions:

#+name: cond
#+begin_exe
\ex Context: /we know that someone was in the audience/.\\
??If nobody was in the audience, then the event was a disaster.
#+end_exe

** Internal staticity and Hurford's constraint

Recall that in DPL, a key observation motivating the entry for disjunction is that we appear to observe /internal/ staticity.

#+name: int-stat
#+begin_exe
\ex ??Either someone\(^v\) is in the audience, or they\(_v\)'re sitting down.
#+end_exe

G&S build this directly into the semantics of disjunction, which precludes an explanation for bathroom sentences, as we've discussed [cite:@GroenendijkStokhof1991].

Simons suggests that the reason anaphora is impossible in ([[int-stat]]) is not due to the dynamics of disjunction, but because the pronoun in the second disjunct is a covert definite description [cite:@Simons1996;@Simons2005] (the "e-type" strategy that we disregarded at the beginning of the semester [cite:@Evans1977;@Heim1990;@Elbourne2005]). 

On this view, the pronoun stands in for the description /the person in the audience/. Note that the following is also infelicitous. Simons suggests that if we can provide an explanation for ([[simons]]), we can explain ([[int-stat]]).

#+name: simons
#+begin_exe
\ex ??Either someone\(^v\) is in the audience, or *the person in the audience* is sitting down.
#+end_exe

Why indeed is ([[simons]]) odd? Famously, disjunctive sentences are generally odd if one disjunct entails the other. This general principle is known as Hurford's Constraint ([cite:@Hurford1974;@Gazdar1979]).

HC can be illustrated by considering a minimal variation of ([[simons]]).

#+name: hurford
#+begin_exe
\ex ??Either someone is in the audience, or someone in the audience is sitting down.
#+end_exe

A minimal extension of HC to ([[simons]]) is as follows: a disjunctive sentence is infelicitous if one of the disjuncts /Strawson entails/ the other.[fn:6]

This is because, the second disjunct presupposes that a (unique) person is in the audience. Assuming that this presupposition is satisfied, the second disjunct entails the first.

A reason to be dissatisfied with Simons' analysis: why /must/ the pronoun in the second disjunct receive an e-type interpretation? This is even more mysterious, since elsewhere Simons assumes a version of dynamic semantics.

Let's consider a rendering of ([[int-stat]]) in EDS:

#+name: eds-int
#+begin_exe
\ex \((\mathbf{a.ling}^v\ (\lambda x\,.\,\eta(\mathbf{in.audience}(x)))) \bap (\eta(\mathbf{or}) \fap (\mathbf{they}_v \bap \eta(\mathbf{sitting.down})))\)
#+end_exe

Under what conditions might ([[eds-int]]) be classically true (i.e., have a non-empty positive extension)?

#+begin_tipblock
This is only possible if the first disjunct is classically true. If the first disjunct is false or undefined, then due to positive closure, it won't introduce any anaphoric information, which will induce undefinedness of the second disjunct.
#+end_tipblock

It follows: every context in which the second disjunct is true will be one in which the first is also true.

We reformulate Hurford's constraint to take into account the dynamics of disjunction, to capture this intuition:

#+begin_definition
Dynamic HC: A sentence of the form "\(p\) or \(q\)" is odd if "not \(p\) and \(q\)" isn't classically true, or "\(p\) and not \(q\)" isn't classically true, at every evaluation point.
#+end_definition

This rules out ([[int-stat]]), since "nobody\(^v\) is in the audience and they\(_v\)'re sitting down" isn't true at any evaluation point.

We can also use this idea to tie up a loose end with negated conjunctions. 

Negated conjunctions seem subject to something like HC: in a sentence of the form "not [P and Q]", if either conjunct entails the other, the sentence is odd.

#+name: odd
#+begin_exe
\ex ??It's not true that [someone was in the audience and someone in the audience is sitting down].
#+end_exe

Dynamic HC accounts for the fact that anaphora is impossible in the following sentence, since if negation of the first conjunct is false, then the negation of the second conjunct always has an empty positive extension. This violates dynamic HC, applied to negated conjunction via de Morgan's laws.

#+name: following
#+begin_exe
\ex ??It's not true that [nobody\(^v\) is in the audience and they\(_v\)'re sitting down].
#+end_exe

Unfortunately, it doesn't seem to be possible to take an existing formulation of HC "off the shelf", since existing formulations don't generally take into account the possibility of anaphoric dependencies between disjuncts.

#+begin_tipblock
An area of future research: a consideration of the status of dynamic HC in light of attempts to reduce HC to incremental redundancy.
#+end_tipblock

* Conclusion

we’ve achieved a dynamic semantics which is up-front about what exactly it stipulates.

#+begin_tipblock
The locus of stipulation is in the compositional rules, which we stipulate pass referential information from left-to-right, and in the semantics of indefinites, which incorporates discourse referent introduction and closure.
#+end_tipblock

the idea is that there is a single switch which gives rise to incrementality in anaphoric processing; this isn’t localized to the lexical entries of individual connectives.

In developing a more principled theory of anaphora, what we’ve learned is that the literature has essentially been mistaken in taking the accessibility generalizations at face value.

Developing an understanding of the pragmatics of referential information is essential in order to improve on our understanding of the semantic component.

As we’ve seen, it’s possible to retain some of the appealing aspects of dynamic semantics - such as the dynamic notion of content - while improving upon the stipulative nature of extant dynamic theories.

A promissory list of topics, for the latter third of the course:

- Weak vs. strong readings of donkey sentences, and the relationship with free choice and homogeneity [cite:@Kanazawa1994;@Kanazawa2001;@Chierchia1995;@ChampollionEtAl2019].
- Plurality and generalized quantification in second-generation dynamic theories [cite:@vandenBerg1996;@Nouwen2003;@Keshet2019].
- Modality, modal subordination, and hypothetical discourse referents [cite:@GroenendijkEtAl1996;@Kibble1994;@Veltman1996;@Roberts1989;@Hofmann2019;]
- Dynamic inquisitive semantics [cite:@DotlacilRoelofsen2019;@DotlacilRoelofsen2021].
- Filipe Hisao Kobayashi on /post-suppositions/ [cite:@Brasoveanu2013;@Charlow2016].

* References

#+print_bibliography:

* Footnotes
[fn:13] An interesting property of the system is that predictions regarding anaphora end up being asymmetric, by dint of the incrementality encoded in \(\fap\) and \(\bap\), even though the underlying apparatus for dealing with presupposition projection is symmetric. 

[fn:12] I implicitly assume here that \(\mathbf{A}^+_{w,g}\) has been suitably intensionalized, and returns a set of world-assignment pairs, rather than just a set of assignments.
[fn:11] An alternative moniker could be /Existential Dynamic Semantics/, due to the weak truth-conditions predicted for donkey and bathroom sentences. I'm currently undecided, but open to suggestions.
[fn:10] As we'll see when we introduce the concrete semantics-pragmatics bridge, only /positive/ anaphoric information has the potential to enter into the file context.
[fn:9] Concretely: the ~State.Set~ applicative functor.

[fn:8] In fact, we only really need two. \(\fap\) and \(\bap\) are the result of applying the applicative lift combinator ~liftA2~ to forwards and backwards function application respectively. 
[fn:7] Note that the workings of \(\dag\) are highly reminiscent of Mandelkern's independently-developed disjunctive /witness presupposition/ [cite:@Mandelkern2022]. Unlike Mandelkern, we don't make use of presuppositional machinery to militate where indefinites introduce anaphoric information, and therefore EDS avoids some of the pitfalls of Mandelkern's static theory. We won't discuss this in detail today, but Mandelkern must make an ad hoc distinction between anaphoric presuppositions and ordinary presuppositions, in terms of how they constrain (or fail to constrain) affect update. The bridge principle of EDS, on the other hand, is totally orthodox. 

[fn:6] A sentence \(\phi \) Strawson entails a sentence \(\psi\) if, when the presuppositions of \(\phi \) are satisfied, \(\phi \) entails \(\psi\) [cite:@vonFintel1999].
[fn:5] I'm optimistic that this general style of explanation can be extended to the (apparent) external staticity of conditional sentences. but this is complicated by the fact that material implication is undoubtedly not a realistic semantic proposal for conditional sentences of English. 

[fn:4] Here and throughout I assume that /no/ is the composition of sentential negation and the indefinite determiner. 
ff
#+name: neg
#+begin_exe
\ex \(\mathbf{no.ling}^v := \lambda k\,.\,\eta(\mathbf{not}) \fap \mathbf{a.ling}^v(k)\)\hfill\((e \to D\ t) \to D\ t\)
#+end_exe

[fn:3] See [cite:@Mandelkern2022] for a similar set up. 

[fn:2] Initially, we'll present EDS as an extensional system; ultimately, everything will need to be intensionalized. 
 
[fn:1] \(a\) is an implicitly universally-quantified variable over types.

* File local variables                                             :noexport:

# Local Variables:
# mode: org
# org-latex-default-packages-alist: nil
# org-latex-with-hyperref: nil
# End:

