#+title: Externally-dynamic dynamic semantics
#+author: Patrick D. Elliott 
#+bibliography: ../../bibliography/master.bib
#+setupfile: handout-template.org
#+OPTIONS: ':t
#+cite_export: biblatex

* Introduction

** Next week

Starting from next week, Amir Anvari will be discussing /oddness and redundancy/ for three sessions. A summary of the content, taken from the class description:

#+begin_quote
"/We will rehearse a host of puzzles that have been discussed in the literature on oddness (Singh 2008, Katzir & Singh 2014, Mayr & Romoli 2016, Mandelkern & Romoli 2018, Marty & Romoli 2021). The ambition is to provide a unified analysis for all these cases. We begin with the classical insight, as formulated by Katzir & Singh (2015), that “a good assertion is one that provides a good answer to a good question”: a good sentence is one that is about something. We explore the idea that the question that a sentence addresses in a given context is one that must be constructed in a principled fashion from sentence itself and its formal alternatives (Katzir 2007, Fox & Katzir 2011). If such a “formal background question” cannot be constructed, the sentence is not about anything and predicted to be odd. We will explore one implementation of this idea in the context of the puzzles mentioned./"
#+end_quote

** This week: towards a new foundation

Last week we discussed several problems that arise in "first-generation" theories of dynamic semantics, such as FCS and DPL.

The problems relate to the interaction between /logical operators/ and /anaphoric information flow/ (the so-called /accessibility generalizations/).

#+begin_tipblock
A telling characterization: many of the exceptions to the accessibility generalizations we discussed last week are yoked to *non-classicality* in theories such as DPL.
#+end_tipblock

For example, double-negation.

#+name: shirt
#+begin_exe
\ex John doesn't have NO\(^v\) shirt. It\(_v\)'s in his closet!
#+end_exe

De Morgan's laws.

#+name: bathroom
#+begin_exe
\ex Either there's no\(^v\) bathroom, or it\(_v\)'s upstairs.
\ex It's not the case that there's a\(^v\) bathroom and it\(_v\)'s not upstairs.
#+end_exe

These empirical problems are connected to a conceptual problem with dynamic semantics - anaphoric information flow is /pre-compiled/ into the lexical entries of logical expressions such as conjunction. 

What is the relationship between dynamic entries for logical expressions and their classical counterparts?

#+begin_tipblock
A related problem: classical dynamic theories are /sententialist/ in the sense that the propositional type is the repository of anaphoric information (we'll make this concrete in a moment).
#+end_tipblock

This leads to theories of semantic composition which barely resemble anything that can be found, e.g., in a compositional semantics textbook such as [cite:@HeimKratzer1998;@Carpenter1998].

This has lead to a general misconception that dynamic semantics weds one to a sententialist mode of composition, with dynamic sequencing at its center.

Charlow, building on [cite:@Muskens1996], innovates mechanisms for separating off anaphoric information flow from the Fregean essence of semantic composition.

We'll adopt some of Charlow's machinery as we develop /Externally-dynamic Dynamic Semantics/.

The trade-off in EDS:

- Adopt a richer notion of /content/, to free ourselves from the sententialist shackles of orthodox DS.
- Adopting a richer notion of content allows us to refrain from lexicalizing anaphoric information flow. 
- The resulting theory will be quite permissive, and we'll need to pay careful attention to the pragmatics in order to avoid over-predicting anaphoric possibilities.
  
*The pay-off:* an empirically and conceptually superior foundation. EDS is intended to be a /bona fide/ alternative to FCS and DPL.

Note that today I'll present EDS as a compositional grammar - in [cite:@Elliott2020g] I give a fully equivalent first-order presentation, which is in many respects terser, but less transparent wrt to composition. 

* Types and propositions

In the first generation dynamic systems we've considered, culminating in pointwise FCS, dynamics are a sentential phenomenon.

A sentential meaning is a function from an input assignment to a set of output assignments; we can express this via the type \(T\).

#+name: def:oldtype
#+begin_exe
\ex \(T := g \to \set{g}\)
#+end_exe

Sentential meanings in DPL/pointwise FCS:

#+name: someone
#+begin_exe
\ex \(\eval*{\text{a}^v\text{ linguist walked in}} = \lambda g\,.\,\set{g^{[v \to x]}|\mathbf{walked.in}(x)}\)
#+end_exe

IN DPL/pointwise FCS, even the indefinite article is sentential, as is its restrictor and scope. 

#+name: indef1
#+begin_exe
\ex \(\eval{a} = \lambda g\,.\,\set{g^{[v \to x]}|x \in D}\)
\ex \(\eval*{v\text{ linguist} } = \lambda g\,.\,\set{g|\mathbf{linguist}(g_v)}\)
\ex \(\eval*{v\text{ walked in}} = \lambda g\,.\,\set{g|\mathbf{walked.in}(g_v)}\)
#+end_exe

We knit these meanings together via dynamic sequencing (relational composition; also the entry for conjunction).

#+name: rel
#+begin_exe
\ex \(p\mathbin{;}q := \lambda g\,.\,\bigcup\limits_{g' \in p(g)}\set{h | h \in q(g')}\)
#+end_exe

- Why should dynamics be a purely sentential phenomemon?
- Unclear how to combine first generation dynamic systems with an orthodox approach to composition.

Charlow teaches us how to factor out dynamics, keeping track of anaphoric information as a by-product of "ordinary" composition [cite:@Charlow2014;@Charlow2020].

As a backdrop to EDS, we'll adopt Charlow's general recipe for dynamic types.[fn:1][fn:2]

#+name: def:type
#+begin_exe
\ex \(D\ a := g \to \set{a \times g}\)
#+end_exe

For example, sentences in EDS will be type \(D\ t\); VPs will be type \(D\ (e \to t)\); pronouns in EDS will be of type \(D\ e\); indefinites will be of type \((e \to D\ t) \to D\ t\).

This regime is strictly speaking more expressive than what is afforded to us by, e.g., DPL.

In DPL, classical truth corresponds to having a non-empty output set; an empty output set corresponds to classical falsity.

In EDS, sentential meanings are functions from assignments to /sets of truth-value, assignment pairs/; type \(g \to \set{t \times g}\).

This will allow us to keep track of anaphoric information associated with verification and falsification in tandem; we'll need a different reconstruction of classical truth, which will turn out to be very natural.

#+begin_importantblock
Keeping track of anaphoric information associated with verification /and/ falsification will be *crucial* to the main results of EDS.
#+end_importantblock

* Pronouns and partiality

In EDS, much like in Charlow's monadic grammar, pronouns are expressions of type \(D\ e\), i.e., /dynamic individuals/.

In EDS, assignments are assumed to be /partial/, i.e., undefined for certain variables.

We'll model this by treating the domain of assignments (\(D_g\)) as a set of /total/ functions \(f: V \to D_e\), where \(D_e\) contains a privileged value \(\#_e\) - the impossible individual.[fn:3]

For example, given a stock of variables \(\set{x,y,z}\), the following is a partial assignment:

#+name: ex:part
#+begin_exe
\ex \(\left[\begin{aligned}[c]
&x &\to &\mathbf{josie}\\
&y &\to &\mathbf{sarah}\\
&z &\to &\#_e
\end{aligned}\right]\)
#+end_exe

The unique initial assignment, \(g_\top\), maps every \(v \in V\) to the impossible individual.

Pronouns have the following semantics in EDS:

#+name: def:eds-pron
#+begin_exe
\ex \(\mathbf{she}_v := \lambda g\,.\,\set{(g_v,g)}\)\hfill\(D\ e\)
#+end_exe

Since EDS builds on a Strong Kleene logical foundation, we'll make use of three distinct truth values:

#+name: def:tri
#+begin_exe
\ex \(D_t = \set{\mathbf{yes},\mathbf{no},\mathbf{maybe}}\)
#+end_exe

We'll make use of an operator \(\delta : t \to t \) to model presuppositions, with the following semantics.

#+name: def:delta
#+begin_exe
\ex \(\delta(t) = \begin{cases}
\mathbf{yes}&t = \mathbf{yes}\\
\mathbf{maybe}&\text{otherwise} 
\end{cases}\)
#+end_exe

Sentences with a pronoun indexed \(v\) presuppose that \(v\) is defined at the input assignment. Formally:

#+name: ex:sentence1
#+begin_exe
\ex \(\mathbf{she}_v\ \mathbf{satDown} := \lambda g\,.\,\set{(\delta(g_v \neq \#_e) \mathbin{\&} \mathbf{satDown}(g_v),g)}\)\hfill\(D\ t\)
#+end_exe

An alternative rendering:

#+name: ex:sentence2
#+begin_exe
\ex \(\lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g)|\mathbf{satDown}(g_v) \wedge g_v \neq \#_e}\\
&\cup \set{(\mathbf{no},g)|\neg\mathbf{satDown}(g_v) \wedge g_v \neq \#_e}\\
&\cup \set{(\mathbf{maybe},g)|g_v = \#_e}
\end{aligned}\)
#+end_exe

We'll often omit the explicit presupposition, assuming that any predicate fed an impossible individual as an argument outputs \(\mathbf{maybe}\).

* Indefinites

In order to establish our semantics for indefinites in EDS, we'll go through a couple of steps:

- The correlate of /random assignment/ in EDS.
- A reconstruction of classical truth and falsity in EDS.
- A "positive closure" operator for EDS; non-verifying anaphoric information is filtered.
- Finally, a semantics for indefinites as the composition of random assignment and positive closure. 

** Random assignment in EDS

It will be helpful to first define the correlate of DPL /random assignment/ in EDS (relative to a restrictor \(r\), which we just treat as a plain set of individuals).

#+name: def:random
#+begin_exe
\ex \(\varepsilon^{v} = \lambda r\,.\,\lambda k\,.\,\lambda g\,.\,\bigcup\limits_{r(x)}k(x)(g^{[v \to x]})\)\hfill\((e \to t) \to  (e \to D\ t) \to D\ t\)
#+end_exe

Let's see this in action (importantly, this is *not* our entry for the indefinite determiner).

#+name: ex:rand
#+begin_exe
\ex \(\varepsilon^v(\mathbf{ling})(\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{swims}(x),g)})\)\hfill\(D\ t\)
\ex \(\lambda g\,.\,\set{(\mathbf{swim}(x),g^{[v \to x]})|\mathbf{ling}(x)}\)
#+end_exe

An equivalent, illuminating rendering:

#+name: ex:rand2
#+begin_exe
\ex \(\lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge  \mathbf{swim}(x)}
\end{aligned}\)
#+end_exe

We take an input assignment \(g\), and extend \(g\) indeterministically at \(v\) (DPL style) to linguists, and:

- Tag those assignments extended to a linguist who swims with \(\mathbf{yes}\).
- Tag those assignments extended to a linguist who doesn't swim with \(\mathbf{no}\).
  
We'll define an auxiliary notion now which will come in handy in a few different places: the /polarized anaphoric information/ of a sentence relative to an assignment, which we'll write as \(\mathbf{A}^+_g/\mathbf{A}^-_g\).

#+name: def:polar
#+begin_exe
\ex \(\mathbf{A}^+_g(p) := \set{h | (\mathbf{yes},h) \in p(g)}\)
\ex \(\mathbf{A}^-_g(p) := \set{h | (\mathbf{no},h) \in p(g)}\)\hfill\(D\ t \to T\)
#+end_exe

We can use this notion to provide an intuitive definition of truth at a point: a sentence is /true/ wrt an assignment \(g\) if there is some way of verifying \(p\) at \(g\), /false/ if there is no way of verifying \(p\) at \(g\), but some way of falsifying \(p\) at \(g\), and neither true nor false otherwise.

#+name: def:truth
#+begin_exe
\ex \(\mathbf{true}_g(p) := \mathbf{A}^+_g(p) \neq \emptyset\)
\ex \(\mathbf{false}_g(p) := \mathbf{A}^+_g(p) = \emptyset \wedge \mathbf{A}^-_g(p) \neq \emptyset\)
\ex \(\mathbf{neither}_g(p) := \mathbf{A}^+_g(p) = \emptyset \wedge \mathbf{A}^-_g(p) = \emptyset \)\hfill\(D\ t \to g \to t\)
#+end_exe

Finally, we state our /positive closure operator/ \(\dag\), which will be crucially implicated in our semantics for the indefinite article.

The positive closure operator only allows anaphoric information to pass through if its argument is classically true.[fn:7]

#+name: def:dag
#+begin_exe
\ex \(\dag(p)(g) := \begin{aligned}[t]
&\set{(\mathbf{yes},h) \in p(g)}\\
&\cup \set{(\mathbf{no},g)|\mathbf{false}_g(p)}\\
&\cup \set{(\mathbf{maybe},g)|\mathbf{neither}_g(p)}
\end{aligned}\)\hfill\(\dag : D\ t \to D\ t\)
#+end_exe

The following is a logical truth in EDS (positive dagger elimination):

#+name: fact:clo
#+begin_exe
\ex \(\mathbf{A}^+_g(\dag(p)) = \mathbf{A}^+_g(p)\)
\ex \(\mathbf{A}^-_g(\dag(p)) \neq \mathbf{A}^-_g(p)\)
#+end_exe

Now we can state our final proposal for the semantics of indefinites as the composition of random assignment and positive closure.

#+name: def:indef-final
#+begin_exe
\ex \(\mathbf{a.ling}^v := \lambda k\,.\,\dag(\varepsilon^v(\mathbf{ling})(k))\)\hfill\((e \to D\ t) \to D\ t\)
#+end_exe 

#+name: ex:indef-final
#+begin_exe
\ex \(\mathbf{a.ling}^v\ (\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{swim}(x),g)})\)
\ex \(= \dag(\varepsilon^v(\mathbf{ling})(\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{swim}(x),g)}))\)
\ex \(= \lambda g\,.\,\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)} \cup \set{(\mathbf{no},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{swim}(x)]}\)
#+end_exe

The input assignment is indeterministically extended at \(v\) to linguists who swim, and paired with \(\mathbf{yes}\); if there aren't any linguists who swim, the input assignment is paired with \(\mathbf{no}\).

* Compositionality

As a methodological principle, we'll insist that proper names, predicates, logical expressions etc. don't have any inherent dynamics.

#+name: ex:classic
#+begin_exe
\ex \(\mathbf{John} : t\)
\ex \(\mathbf{swim} : e \to  t\)
\ex \(\mathbf{not} : t \to t\)
#+end_exe

Only a sub-part of the grammar wears its dynamic capabilities on its sleeve.

In order to lift expressions without inherent dynamics into EDS, we need just three combinators, which together constitute an /applicative functor/ [cite:@McbridePaterson2008].[fn:8]

/Pure/ (\(\eta\)) lifts any expression \(a\) into a trivially dynamic \(a\). We've already been implicitly making use of this combinator in previous sections.

#+name: def:pure
#+begin_exe
\ex \(\eta(a) := \lambda g\,.\,\set{(a,g)}\)\hfill\(\eta : a \to D\ a\)
#+end_exe

/Dynamic FA/ (\(\fap\)) does function application of its left argument to its right and threads anaphoric information from left-to-right.

#+name: def:fap
#+begin_exe
\ex \(m \fap n := \lambda g\,.\,\bigcup\limits_{(f,g') \in m(g)}\set{(f(x),g'')|(x,g'') \in n(g')}\)\hfill\((\fap) : D\ (a \to b) \to D\ a \to D\ b\)
#+end_exe

/Dynamic backwards FA/ (\(\bap\)) does backwards function application and threads anaphoric information from left-to-right.

#+name: def:bap
#+begin_exe
\ex \(m \bap n := \lambda g\,.\,\bigcup\limits_{(x,g') \in m(g)}\set{(f(x),g'')|(f,g'') \in n(g')}\)\hfill\((\bap): D\ a \to D\ (a \to b) \to D\ b\)
#+end_exe

Composition is directional, reflecting the inherent incrementality of dynamic semantics:

#+begin_export latex
\begin{exe}
\ex
\(\eval*{\begin{array}{c}
\begin{forest}
[{\(\gamma\)}
  [{\(\alpha_{D\ (a \to b)}\)}]
  [{\(\beta_{D\ a}\)}]
]
\end{forest}
\end{array}} = \eval*{\alpha } \fap \eval*{\beta }\)
\ex
\(\eval*{\begin{array}{c}
\begin{forest}
[{\(\gamma\)}
  [{\(\alpha_{D\ a}\)}]
  [{\(\beta_{D\ (a \to b)}\)}]
]
\end{forest}
\end{array}} = \eval*{\alpha } \bap \eval*{\beta }\)
\end{exe}
#+end_export

Note that I'm assuming that the flow of anaphoric information is conditioned by linear order, but a different assumption is just a matter of a small tweak to the rules stated above to be sensitive to structure/headedness (see [cite:@Privoznov2021] for arguments for this kind of view).

Some exercises - note that in-scope dynamic binding follows immediately from the composition principles and our semantics for indefinites (which extends DPL-style random assignment).

#+name: pro-comp
#+begin_exe
\ex She\(_v\) sat down.\\
\(\mathbf{she}_v \bap \eta(\mathbf{sat.down}) = \lambda g\,.\,\set{(\mathbf{satDown}(g_v),g)}\)
\ex A\(^v\) linguist walked in.\\
\(\mathbf{a.ling}^v\ (\lambda x\,.\,\eta(\mathbf{walked.in}(x))) = \dag(\varepsilon^v(\mathbf{ling})(\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{walked.in}(x),g)}))\)
#+end_exe

Note that in-scope dynamic binding follows immediately:

#+begin_export latex
\begin{exe}
\ex Some\(^v\) linguist likes her\(_v\) mother.\\
\begin{forest}
          [{$\dag(\lambda g\,.\,\set{(\mathbf{likes}(\mathbf{mother.of}(x))(x),g^{[v \to  x]})|\mathbf{ling}(x)})$}
          [{$\dag(\varepsilon^{n}(\mathbf{ling})(\lambda x\,.\,\lambda g\,.\,\set{(\mathbf{likes}(\mathbf{mother}(g_{v}))(x),g)}))$}
            [{$(e \to D\ t) \to D\ t$} [{some$^{v}$ linguist},roof]]
            [{$e \to D\ t$}
            [{$\lambda x$}]
            [{$\lambda g\,.\,\set{(\mathbf{likes}(\mathbf{mother}(g_{v}))(x),g)}$}
            [{$D\ t$\\$\bap$}
            [{$D\ e$\\$\eta(t_{x})$}]
            [{$D\ (e \to t)$\\$\fap$}
              [{$D\ (e \to e \to t)$\\$\eta(\mathbf{likes})$}]
              [{$D\ e$} [{his$_{v}$ mother},roof]]
            ]
          ]]]]]
        \end{forest}
\end{exe}
#+end_export

* Lifting logical operators

#+begin_tipblock
How do logical expressions interact with sentential meanings in EDS? Note that sentential meanings have a truth-valuable substrate. This means we can straightforwardly integrate logical expressions qua truth-functional operators into EDS via \(\eta\), \(\fap\), and \(\bap\).
#+end_tipblock

The question is whether this will deliver the right results wrt accessibility. Most of the rest of this class will be an extended argument that it does.

** Strong Kleene

Strong Kleene semantics is a logical encoding of how we reason about uncertainty/indeterminate truth.

#+begin_export latex
\begin{figure}[H]
    \centering
  \begin{tabular}{l|r}
      $\neg_s$  &  \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{no}$   \\
      $\mathbf{no}$  & $\mathbf{yes}$   \\
      $\mathbf{maybe}$ & $\mathbf{maybe}$
  \end{tabular}
  \quad
  \begin{tabular}{l|ccc}
      $\wedge _{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{no}$  & $\mathbf{no}$  & $\mathbf{no}$ & $\mathbf{no}$\\
      $\mathbf{maybe}$ & $\mathbf{maybe}$ & $\mathbf{no}$ & $\mathbf{maybe}$\\
  \end{tabular}
\quad
  \begin{tabular}{l|ccc}
      $\vee_{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{yes}$ & $\mathbf{yes}$\\
      $\mathbf{no}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{maybe}$ & $\mathbf{yes}$ & $\mathbf{maybe}$ & $\mathbf{maybe}$\\
  \end{tabular}
  \quad
  \begin{tabular}{l|ccc}
      $\rightarrow_{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{no}$  & $\mathbf{yes}$  & $\mathbf{yes}$ & $\mathbf{yes}$\\
      $\mathbf{maybe}$ & $\mathbf{yes}$ & $\mathbf{maybe}$ & $\mathbf{maybe}$\\
  \end{tabular}
  \caption{Strong Kleene truth tables}\label{table:neg}
\end{figure}
#+end_export

** Negation

Our compositional regime dictates that negation, a sentential operator must be lifted via \(\eta\) and compose with its argument via \(\fap\).

#+begin_export latex
\begin{forest}
[{\(D\ t\)\\\(\fap\)}
  [{\(D\ (t \to t)\)\\\(\eta(\mathbf{not})\)}]
  [{\(D\ t\)\\\(p\)}]
]
\end{forest}
#+end_export

This predicts the following semantics for negated sentences:

#+name: ex:neg
#+begin_exe
\ex \(\eta(\mathbf{not}) \fap p\)
\ex \(= \lambda g\,.\,\set{(\neg_s(t),h)|(t,h) \in p(g)}\)
#+end_exe

In other words, negation simply flips the polarity of the output assignments.

When we apply negation to a sentence with an indefinite, truth-values in the output set are flipped.

#+name: no-ling
#+begin_exe
\ex \(\eta(\mathbf{not}) \fap (\mathbf{a.ling}^v (\lambda x\,.\,\eta(\mathbf{swims}(x))))\)
\ex \(= \lambda g\,.\,\set{(\neg_s(\mathbf{yes}),g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swims}(x)} \cup \set{(\neg_s(\mathbf{no}),g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{swims}(x)]}\)
\ex \(= \lambda g\,.\,\set{\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swims}(x)} \cup \set{(\mathbf{yes},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{swims}(x)]}\)
#+end_exe

Consequence: if the negated sentence is classically true, no anaphoric information is introduced. 

One of the core insights of DPL is that this seems desirable, but in DPL this is essentially precompiled into the meaning of logical negation.

#+name: no
#+begin_exe
\ex John doesn't have a\(^v\) shirt. ??It\(_v\)'s in the closet.
#+end_exe

In EDS, by way of contrast, we don't precompile anything to do with dynamics into the meaning of negation.

Moreover, this example teaches us why random assignment (\(\varepsilon^v\)) isn't fit for purpose as a semantics for the indefinite article in EDS.

Essentially, this is because of the following fact.

#+begin_fact
Logical negation commutes with random assignment in EDS.

\[\eta(\mathbf{not}) \fap \varepsilon^v(f)(k) = \varepsilon^v(f)(\lambda x\,.\,\eta(\mathbf{not}) \fap k(x))\]
#+end_fact

To see why, let's consider a concrete example:

If the indefinite article contributes random assignment, then "no\(^v\) linguist swims"[fn:4] indeterministically extends \(g\) at \(v\) to linguists who swim, and tags the result \(\mathbf{no}\), and indeterministically extends \(g\) at \(v\) to linguists who don't swim, and tags the result \(\mathbf{no}\). 

#+name: ex:neg
#+begin_exe
\ex \(\eta(\mathbf{not}) \fap \varepsilon^v(\mathbf{ling})(\lambda x\,.\,\eta(\mathbf{swim}(x)))\)
\ex \(= \lambda g\,.\,\set{(\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)} \cup \set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \neg(\mathbf{swim}(x))}\)
#+end_exe

"Some linguist doesn't swim" does exactly the same thing (in fact, it's even easier to see).

#+name: ex:neg2
#+begin_exe
\ex \(\varepsilon^v(\mathbf{ling})(\lambda x\,.\,\eta(\mathbf{not}) \fap \eta(\mathbf{swim}(x)))\)
\ex \(= \lambda g\,.\,\set{(\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)} \cup \set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \neg(\mathbf{swim}(x))}\)
#+end_exe

Any dynamic semantics which adopts a DPL-style entry for indefinites, such as Charlow's monadic grammar, must precompile anaphoric closure into the meaning of negation.

In EDS, thankfully, indefinites don't commute with negation. Thanks to positive closure, any false tagged assignments fail to introduce anaphoric information.

#+name: ex:eds-neg
#+begin_exe
\ex \(\eta(\mathbf{not}) \fap \mathbf{a.ling}^v\ (\lambda x\,.\,\eta(\mathbf{swim}(x)))\)
\ex \(= \lambda g\,.\,\set{(\neg_s(\mathbf{yes}),g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)} \cup \set{(\neg_s(\mathbf{no}),g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{swim}(x)]}\)
\ex \(= \lambda g\,.\,\set{(\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{swim}(x)} \cup \set{(\mathbf{yes},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{swim}(x)]}\)
#+end_exe

Note that /falsification/ of a negative sentence has the potential to introduce anaphoric information.

It should be obvious now that the following equivalence holds in EDS.

#+begin_fact
Double-negation elimination is valid in EDS.

\[\eta(\mathbf{not}) \fap \eta(\mathbf{not}) \fap p = p\]
#+end_fact

A signature feature of EDS: a single negation closes off anaphoric information, but double-negation is anaphorically equivalent to the embedded positive sentence.

This seems like a good logical starting point, based on the problems we discussed for DPL (inherited by subsequent approaches).

#+name: shirt
#+begin_exe
\ex John doesn't have no shirt. It's in his closet.
#+end_exe

Data currently beyond the remit of this analysis (example from [cite:@Hofmann2019]) - we'll talk about this in several weeks time, when we introduce modality and modal subordination.

#+name: ex:hofman
#+begin_exe
\ex There is no\(^v\) bathroom in this house. It\(_v\) would be easier to find.
#+end_exe

** Conjunction and discourse anaphora

#+begin_export latex
\begin{figure}[H]
\begin{tabular}{l|ccc}
      $\wedge _{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{no}$  & $\mathbf{no}$  & $\mathbf{no}$ & $\mathbf{no}$\\
      $\mathbf{maybe}$ & $\mathbf{maybe}$ & $\mathbf{no}$ & $\mathbf{maybe}$\\
  \end{tabular}
  \caption{Strong Kleene conjunction}
\end{figure}
#+end_export

Our compositional regime also allow binary truth-functional operators to compose with dynamic propositions, such that the flow of referential information tracks the linear order of the juncts.

#+begin_export latex
\begin{exe}
\ex
\begin{forest}
  [{\(D\ t\)\\\(\bap\)}
    [{\(D\ t\)\\\(p\)}]
    [{\(D\ (t \to t)\)\\\(\fap\)}
      [{\(D\ (t \to t \to t)\)\\\(\eta(\mathbf{and})\)}]
      [{\(D\ t\)\\\(q\)}]
    ]
  ]
\end{forest}
\end{exe}
#+end_export

Recall, as a methodological principle, we insist that conjunction is just a function over truth-values (here: strong Kleene conjunction):

#+name: def:conj
#+begin_exe
\ex \(p \mathbin{\mathbf{and}} q := p \wedge_s q\)\hfill\(t \to t \to t\)
#+end_exe

Interestingly, Egli's theorem holds in EDS but only with respect to positive anaphoric information!

One way to illustrate this is to consider "A linguist entered and she sat".

#+name: egli-illustration.
#+begin_exe
\ex \((\mathbf{a.ling}^v(\lambda x\,.\,\eta(\mathbf{entered}(x)))) \bap (\eta(\mathbf{and}) \fap (\mathbf{she}_v \bap \eta(\mathbf{sat})))\)
\ex \(= \lambda g\,.\,\set{(t \wedge_s u,i)|\exists h[(t,h) \in \dag(\lambda g\set{(\mathbf{entered}(x),g^{[v \to x]})|\mathbf{ling}(x)})(g) \wedge (u,i) \in \set{(\mathbf{sat}(h_v),h)}]}\)
\ex \(= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge  \mathbf{entered}(x) \wedge \mathbf{sat}(x)}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})| \mathbf{ling}(x) \wedge \mathbf{entered}(x) \wedge \neg\mathbf{sat}(x)}\\
&\cup \set{(\mathbf{no},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{entered}(x)]}
\end{aligned}\)
#+end_exe

Another way of thinking about it:

#+begin_noteblock
*Scenario 1 (verification/falsification)*: there is a linguist who entered. The first conjunct introduces a /positive/ discourse referent - the second disjunct retains the positive discourse referent if the linguist sat, and makes it negative otherwise. We never have to consider any *maybe* values.
#+end_noteblock

#+name: scen1
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{yes} \wedge _{s} u,h)|\exists x[\mathbf{ling}(x) \wedge  \mathbf{entered}(x) \wedge  (u,h) \in \set{(\mathbf{sat}(x),g^{[v \to  x]})}]}\)
#+end_exe

#+begin_noteblock
*Scenario 2 (falsification)*: there is no linguist who entered. The second conjunct never effects the truth-value (thanks to Strong Kleene conjunction), nor introduces any discourse referents. *maybe* values don't affect the falsity of the conjunctive sentence.
#+end_noteblock

#+name: scen2
#+begin_exe
\ex \(\lambda g . \set{(\mathbf{no} \wedge_{s} u,h)|(u,h) \in  \set{(\mathbf{sat}(g_{v}),g)}}\)
#+end_exe

The fact that conjunctive sentences can introduce /negative/ anaphoric information (depending on how they're falsified) may strike you as odd. We'll come back to this later.

** Disjunction and bathroom sentences

#+begin_export latex
\begin{figure}[H]
\begin{tabular}{l|ccc}
      $\vee_{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{yes}$ & $\mathbf{yes}$\\
      $\mathbf{no}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{maybe}$ & $\mathbf{yes}$ & $\mathbf{maybe}$ & $\mathbf{maybe}$\\
  \end{tabular}
\caption{Strong Kleene disjunction}
\end{figure}
#+end_export

Just like conjunction, (strong Kleene) disjunction is integrated into our compositional regime via \(\eta, \fap, \bap\).

#+begin_export latex
\begin{exe}
\ex
\begin{forest}
  [{\(D\ t\)\\\(\bap\)}
    [{\(D\ t\)\\\(p\)}]
    [{\(D\ (t \to t)\)\\\(\fap\)}
      [{\(D\ (t \to t \to t)\)\\\(\eta(\mathbf{or})\)}]
      [{\(D\ t\)\\\(q\)}]
    ]
  ]
\end{forest}
\end{exe}
#+end_export

#+name: def:disj
#+begin_exe
\ex \(p \mathbin{\mathbf{or}} q := p \wedge_s q\)\hfill\(\mathbf{or}: t \to t \to t\)
#+end_exe

Let's see how EDS accounts for bathroom disjunctions by considering a concrete example.

#+name: ex:bathroom
#+begin_exe
\ex Either there's no\(^v\) bathroom or it\(_v\)'s upstairs.
\ex \(p_1: \dag(\lambda g\,.\,\set{(\mathbf{bathroom}(x),g^{[v \to x]})|x \in D})\)
\ex \(q_2: \lambda g\,.\,\set{(\mathbf{upstairs}(g_v),g)}\)
\ex \(\(p_1 \bap (\eta(\mathbf{or}) \fap q_2)\)
\ex \(= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g)|\neg\exists x[\mathbf{bathroom}(x)]}\\
&\cup \set{(\mathbf{yes},g^{[v \to x]})|\mathbf{bathroom}(x) \wedge \mathbf{upstairs}(x)}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})|\mathbf{bathroom}(x) \wedge \neg\mathbf{upstairs}(x)}
\end{aligned}\)
#+end_exe

Another way of thinking about it:

#+begin_noteblock
*Scenario 1 (verification):* there's no bathroom. The second disjunct never effects the truth-value (thanks to Strong Kleene disjunction), nor introduces any discourse referents.
#+end_noteblock

#+name: ver1
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{yes} \vee_{s} u,h)|(u,h) \in  \set{(\mathbf{upstairs}(g_{v}),g)}}\)
#+end_exe

#+begin_noteblock
*Scenario 2 (verification/falsification):* There is a bathroom. The first disjunct introduces a /negative/ discourse referent - the second disjunct makes the discourse referent positive if the bathroom is upstairs, and negative otherwise.
#+end_noteblock

#+name: ver2
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{no} \vee_{s} u,h)|\exists x[\mathbf{bathroom}(x) \wedge  (u,h) \in  \set{(\mathbf{upstairs}(x),g^{[v \to x]})}]}\)
#+end_exe

This addresses the problem of bathroom disjunctions for dynamic semantics. Note that the truth-conditions we predict are existential. 

Last week I argued (following a suggestion from Matt Mandelkern) that this is in general a good thing.

#+name: sage
#+begin_exe
\ex Either Sally didn't buy a\(^v\) sage plant, or she bought 8 others along with it\(_v\).
#+end_exe

Any putative uniqueness inference seems to be defeasible.

#+name: defeasible
#+begin_exe
\ex A: Either there is no bathroom, or it's upstairs.\\
B: That's true - in fact there are two bathrooms upstairs.
B: ?That's false - there are two bathrooms upstairs.
#+end_exe

** Donkey anaphora

#+begin_export latex
\begin{figure}[H]
\begin{tabular}{l|ccc}
      $\rightarrow_{s}$  & $\mathbf{yes}$ & $\mathbf{no}$ & $\mathbf{maybe}$ \\
      \toprule
      $\mathbf{yes}$  & $\mathbf{yes}$  & $\mathbf{no}$ & $\mathbf{maybe}$\\
      $\mathbf{no}$  & $\mathbf{yes}$  & $\mathbf{yes}$ & $\mathbf{yes}$\\
      $\mathbf{maybe}$ & $\mathbf{yes}$ & $\mathbf{maybe}$ & $\mathbf{maybe}$\\
  \end{tabular}
  \caption{Strong Kleene implication}
\end{figure}
#+end_export

Just like our other connectives, (strong Kleene) implication is integrated into our compositional regime via \(\eta, \fap, \bap\).

#+begin_export latex
\begin{exe}
\ex
\begin{forest}
  [{\(D\ t\)\\\(\bap\)}
    [{\(D\ t\)\\\(p\)}]
    [{\(D\ (t \to t)\)\\\(\fap\)}
      [{\(D\ (t \to t \to t)\)\\\(\eta(\mathbf{if.then})\)}]
      [{\(D\ t\)\\\(q\)}]
    ]
  ]
\end{forest}
\end{exe}
#+end_export

#+name: def:if
#+begin_exe
\ex \(p \mathbin{\mathbf{if.then}} q := p \rightarrow_s q\)\hfill \(t \to t \to t\)
#+end_exe

Let's see how this handles donkey anaphora in a sentence such as the following:

#+name: donkey1
#+begin_exe
\ex If any\(^v\) linguist is outside, then they\(_v\) are happy.
#+end_exe

#+name: if1
#+begin_exe
\ex \(p_1: \dag(\lambda g\,.\,\set{(\mathbf{outside}(x),g^{[v \to x]})|\mathbf{ling}(x)})\)
\ex \(q_2: \lambda g\,.\,\set{(\mathbf{happy}(g_v),g)}\)
\ex \(p_1 \bap (\eta(\mathbf{if.then}) \fap q_2)\)
\ex \(= \lambda g\,.\,\begin{aligned}[t]
&\set{(\mathbf{yes},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{outside}(x) \wedge \mathbf{happy}(x)}\\
&\cup \set{(\mathbf{no},g)|\neg\exists x[\mathbf{ling}(x) \wedge \mathbf{outside}(x)]}\\
&\cup \set{(\mathbf{no},g^{[v \to x]})|\mathbf{ling}(x) \wedge \mathbf{outside}(x) \wedge \neg\mathbf{happy}(x)}
\end{aligned}\)
#+end_exe

Another way of thinking about this, in terms of verification/falsification strategies encoded by Strong Kleene implication.

#+begin_noteblock
*Scenario 1 (verification/falsification):* Someone is outside. The antecedent introduces a \textit{positive} discourse referent --- the consequent makes the discourse referent positive if they are happy, and negative if not.
#+end_noteblock

#+name: if-ver
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{yes} \rightarrow_{s} u,h)|\exists x[\mathbf{ling}(x) \wedge  \mathbf{outside}(x) \wedge  (u,h) \in  \set{(\mathbf{happy}(x),g^{[v \to  x]})}]}\)
#+end_exe

#+begin_noteblock
*Scenario 2 (verification):* Nobody is outside. The consequent never effects the truth-value, nor introduces any discourse referents:
#+end_noteblock

#+name: if-ver2
#+begin_exe
\ex \(\lambda g\,.\,\set{(\mathbf{no} \rightarrow_{s} u, h)|(u,h) \in  \set{(\mathbf{happy}(g_{v}),g)}}\)
#+end_exe

#+begin_importantblock
*Prediction:* donkey sentences have weak, existential truth-conditions, i.e., ([[donkey1]]) is true just so long as a linguist is outside and happy; the existence of a linguist outside who is unhappy doesn't falsify the sentence, under this reading.
#+end_importantblock

Egli's corrolary doesn't hold in EDS. Rather, we end up with something weaker. In EDS, \(\exists x,p \to q\) is equivalent to \(\neg\exists x,p \vee q\) (by classical equivalence.

#+name: 
#+begin_exe
\ex If any\(^v\) linguist is outside, they\(_v\) are unhappy.
\ex Either no linguist is outside, or (a linguist is outside and) they are happy.
#+end_exe

As we discussed last time, being able to generate weak truth-conditions for donkey sentences is desirable.

#+name: donkey-weak
#+begin_exe
\ex If Gennaro had a\(^v\) credit card, he paid with it\(_v\).
\ex Either Gennaro doesn't have a\(^v\) credit card, or (he has a\(^v\) credit card and) he paid with it.
#+end_exe

#+begin_warningblock
*Strong readings.* At worst, EDS is on a par with first-generation dynamic theories, which only derive strong readings. Arguably, the situation is a little better, since we want our semantics to be compatible with the weakest attested readings. In [cite:@Elliott2020g], I explore the possibility of deriving the strong reading as an implicature, via mechanisms motivated by free choice and homogeneity [cite:@Bar-Lev2018;@Bar-LevFox2017]. We won't have time  to explore this today, but if there is general interest, I can talk more about the landscape of weak/strong readings in several weeks time.
#+end_warningblock

* Pragmatics, and the problem of too many discourse referents

The moniker EDS was chosen because nothing in the semantics of the logical operators blocks anaphoric information flow.

This means that, e.g., disjunctive sentences are both externally and internally /dynamic/ as far as the semantics is concerned.

But, wait a minute! Let's think back to the motivations for DPL disjunction. To see the problem, consider the following:

#+name: ignorance1
#+begin_exe
\ex Either this house hasn't been renovated, or there's a\(^v\) bathroom.\\
??It\(_v\)'s upstairs.
#+end_exe

Suppose there is in fact exactly one bathroom $b$. Don't we predict that the disjunctive sentence will introduce a positive /bathroom/ discourse referent, and anaphora will be licensed? 

A similar problem arises with material implication and negated conjunctions (left as an exercise).

#+begin_warningblock
As we've seen however, we don't want to build external staticity into the semantics of disjunction, as this leads to a dilemma, both conceptual and empirical.
#+end_warningblock

In order to chart a way out, we'll build on an observation by [cite:@Rothschild2017] (anticipated by Amir's question last week).

** Contextual entailment and anaphora 

In a discourse with an asserted disjunctive sentence, if the truth of the disjunct containing an indefinite is later contextually entailed, anaphora becomes possible [cite:@Rothschild2017].

*Context:* The director of a play (A) has lost track of time, and doesn't know what day it is. The director is certain, however, that on Saturday and Sunday, different critics will be in the audience, and utters the disjunctive sentence in ([[ex:ignorance1a]]). A's assistant (B), knows what day it is, and utters the sentence in ([[ex:ignorance1b]]), which contextually entails the second disjunct. Subsequently, anaphora is licensed in ([[ex:ignorance1c]]).

#+name: ignorance
#+begin_exe
\ex A: Either it's a weekday, or a\(^v\) critic is watching our play.<<ex:ignorance1a>>
\ex B: It's Saturday.<<ex:ignorance1b>>
\ex A: They\(_v\)'d better give us a good review.<<ex:ignorance1c>>
#+end_exe

We can make the same point for conditionals.

#+name: ignorance2
#+begin_exe
\ex A: If it's the weekend, then a\(^v\) critic is watching our play.
\ex B: It's Saturday.
\ex A: Then, they\(_v\) better give us a good review.
#+end_exe

#+begin_tipblock
*Resolution:* Complex sentences can give the illusion of external staticity, given the conversational backgrounds against which they can be felicitously uttered.
#+end_tipblock

** A Heimian pragmatics for EDS

First, we systematically intensionalize the fragment, by adding a world parameter: a dynamic \(a\) is a function from a world-assignment pair, to a \(a\)-world-assignment triple.

#+name: def:newtype
#+begin_exe
\ex \(D\ a := s \times g \to \set{a \times s \times g}\)
#+end_exe

Predicates are world-sensitive in an intensional setting, they can be lifted into a dynamic setting via a modified pure (\(\pi \)):

#+name: int-pure
#+begin_exe
\ex \(\pi(a) := \lambda (w,g)\,.\,\set{(a(w),g)}\)\hfill \((s \to a) \to D\ a\)
#+end_exe

Everything else can remain the same, aside from some minor tweaks to keep track of the world of evaluation.

We'll assume the notion of a /file context/ we developed for partial FCS.

#+begin_definition
File contexts. A file context is a set of world-assignment pairs, where assignments are total functions from variables to \(D \cup \set{\#_e}\).

- Initial context \(c_\top\) : \(W \times \set{(g_\top)}\)
- Absurd context \(c_\emptyset \): \(\emptyset \)
#+end_definition

As usual, we need a bridge principle. This turns out just to be a generalization of Stalnaker's bridge [cite:@vonFintel2008], generalized to a setting where we keep track of anaphoric as well as worldly information.

#+begin_definition
Update in EDS.

\[c[\phi] ≔ \begin{cases}
    \bigcup\limits_{(w,g) \in  c}\mathbf{A}^{+}_{w,g}(\phi)&\forall (w,g) \in  c[\mathbf{true}_{w,g}(\phi) \vee \mathbf{false}_{w,g}(\phi)]\\
    \emptyset&\text{otherwise}
    \end{cases}
\]
#+end_definition

#+begin_importantblock
It's worth emphasizing here that this bridge principle is completely orthodox, and is independently motivated by dint of how /presuppositional/ expressions interact with natural language pragmatics. For example, it predicts that \(c[\text{Josie stopped smoking}]\) is defined iff \(c\) entails that Josie used to smoke, assuming that \(\eval{Josie stopped smoking}\) maps worlds to *maybe*, in which Josie never smoked.
#+end_importantblock


N.b.: the familiarity presupposition [cite:@Heim1991] is derived in the same way as in partial FCS. Pronouns indexed \(v\) impose a universal requirement on assignments of the file context (namely, that they be defined at \(v\)).

** External staticity via ignorance

Disjunctive sentences place a requirement on the context - an utterance of a sentence of the form "$p$ or $q$"" is only felicitous if both $p$ and $q$ are /real/ possibilities, i.e., the context shouldn't entail the truth/falsity of either of the disjuncts.

#+name: audience
#+begin_exe
\ex Context: /we know that someone was in the audience/.\\
??Either someone was in the audience or the event was a disaster.
#+end_exe

We can use this fact to account for the apparent external staticity of disjunction. Consider the following space of logical possibilities, representing a conversational background against which the disjunctive sentence may be uttered:

- \(w_{ad}\): \(a\) was in the audience, and the event was a disaster.
- \(w_{a\neg d}\): \(a\) was in the audience, and the event wasn't a disaster.
- \(w_{\emptyset d}\): nobody was in the audience, and the event was a disaster.
- \(w_{\emptyset \neg d}\): nobody was in the audience, and the event wasn't a disaster.
  
And consider the following sentence:

#+name: audience2
#+begin_exe
\ex Either someone\(^v\) was in the audience, or the event was a disaster.
#+end_exe

The positive anaphoric information associated with the disjunctive sentence, relative to an assignment world pair \(w,g\):

#+name: disj-pos
#+begin_exe
\ex \(\begin{aligned}[t]
  &\set{(w,g^{[v \to x]}) | \mathbf{audience}_{w}(x)}\\
  &\cup \set{(w,g) | \neg\exists x[\mathbf{audience}_{w}(x)] \wedge  \mathbf{disaster}_{w}(\mathbf{event})}\\
  \end{aligned}\)
#+end_exe

We can now consider the result of updating the initial information state with the disjunctive sentence. Note that the bridge principle is trivially satisfied, since the sentence doesn't contain any free variables.

#+name: result
#+begin_exe
\ex \(\Set{\begin{aligned}[c]
    &(w_{ad},[v \to  a]),\\
    &(w_{a\neg d},[v \to a],\\
    &(w_{\emptyset d},g_{\top}),\\
  \end{aligned}}\)
#+end_exe

#+begin_warningblock
The resulting information state is one in which \(v\) is /not familiar/! This means that the presupposition of a subsequent sentence with a matching free variable won't be satisfied.
#+end_warningblock

This account correctly captures the contextual entailment facts: an intermediate assertion can eliminate the world-assignment pair \((w_{\emptyset },g_{\top})\), thus rendering \(v\) familiar.[fn:5]

#+name: audience3
#+begin_exe
\ex A: Either someone\(^v\) was in the audience, or the event was a disaster.
\ex B: Actually, the auditorium wasn't empty.
\ex A: In that case, I hope they\(_v\) enjoyed it.
#+end_exe

** Program disjunction

The data which motivated Groenendijk \& Stokhof to posit a distinct entry for disjunction - program disjunction - are already accounted for by EDS.

#+name: program
#+begin_exe
\ex Either a\(^v\) linguist is here, or a\(^v\) philosopher is. (Either way) I hope they\(_v\) found the class interesting.
#+end_exe

The union of the two different ways of dynamically verifying the disjunctive sentence gives us its positive extension.  The salient point to note here is that the output set /only/ contains assignments at which \(v\) is defined.

#+begin_importantblock
To my knowledge, this is the first analysis of disjunction in dynamic semantics which straightforwardly captures both bathroom disjunctions and examples motivating program disjunction in a straightforward fashion.
#+end_importantblock

** Negated conjunctions and ignorance

Restrictions on anaphora from negated conjunctions are accounted for also via ignorance inferences: utterances of the form "not (\(p\) and \(q\))" imply that "not \(p\)" and "not \(q\)" are real possibilities.

An illustration is left as an exercise.

** Internal staticity and Hurford's constraint

Recall that in DPL, a key observation motivating the entry for disjunction is that we appear to observe /internal/ staticity.

#+name: int-stat
#+begin_exe
\ex ??Either someone\(^v\) is in the audience, or they\(_v\)'re sitting down.
#+end_exe

G&S build this directly into the semantics of disjunction, which precludes an explanation for bathroom sentences, as we've discussed [cite:@GroenendijkStokhof1991].

Simons suggests that the reason anaphora is impossible in ([[int-stat]]) is not due to the dynamics of disjunction, but because the pronoun in the second disjunct is a covert definite description [cite:@Simons1996;@Simons2005] (the "e-type" strategy that we disregarded at the beginning of the semester [cite:@Evans1977;@Heim1990;@Elbourne2005]). 

On this view, the pronoun stands in for the description /the person in the audience/. Note that the following is also infelicitous. Simons suggests that if we can provide an explanation for ([[simons]]), we can explain ([[int-stat]]).

#+name: simons
#+begin_exe
\ex ??Either someone\(^v\) is in the audience, or *the person in the audience* is sitting down.
#+end_exe

Why indeed is ([[simons]]) odd? Famously, disjunctive sentences are generally odd if one disjunct entails the other. This general principle is known as Hurford's Constraint ([cite:@Hurford1974;@Gazdar1979]).

HC can be illustrated by considering a minimal variation of ([[simons]]).

#+name: hurford
#+begin_exe
\ex ??Either someone is in the audience, or someone in the audience is sitting down.
#+end_exe

A minimal extension of HC to ([[simons]]) is as follows: a disjunctive sentence is infelicitous if one of the disjuncts /Strawson entails/ the other.[fn:6]

This is because, the second disjunct presupposes that a (unique) person is in the audience. Assuming that this presupposition is satisfied, the second disjunct entails the first.

A reason to be dissatisfied with Simons' analysis: why /must/ the pronoun in the second disjunct receive an e-type interpretation? This is even more mysterious, since elsewhere Simons assumes a version of dynamic semantics.

Let's consider a rendering of ([[int-stat]]) in EDS:

#+name: eds-int
#+begin_exe
\ex \((\mathbf{a.ling}^v\ (\lambda x\,.\,\eta(\mathbf{in.audience}(x)))) \bap (\eta(\mathbf{or}) \fap (\mathbf{they}_v \bap \eta(\mathbf{sitting.down})))\)
#+end_exe

Under what conditions might ([[eds-int]]) be classically true (i.e., have a non-empty positive extension)?

#+begin_tipblock
This is only possible if the first disjunct is classically true. If the first disjunct is false or undefined, then due to positive closure, it won't introduce any anaphoric information, which will induce undefinedness of the second disjunct.
#+end_tipblock

It follows: every context in which the second disjunct is true will be one in which the first is also true.

We reformulate Hurford's constraint to take into account the dynamics of disjunction, to capture this intuition:

#+begin_definition
Dynamic HC: A sentence of the form "\(p\) or \(q\)" is odd if "not \(p\) and \(q\)" isn't classically true, or "\(p\) and not \(q\)" isn't classically true, at every evaluation point.
#+end_definition

This rules out ([[int-stat]]), since "nobody\(^v\) is in the audience and they\(_v\)'re sitting down" isn't true at any evaluation point.

Unfortunately, it doesn't seem to be possible to take an existing formulation of HC "off the shelf", since existing formulations don't generally take into account the possibility of anaphoric dependencies between disjuncts.

#+begin_tipblock
An area of future research: a consideration of the status of dynamic HC in light of attempts to reduce HC to incremental redundancy.
#+end_tipblock

* Conclusion

we’ve achieved a dynamic semantics which is up-front about what exactly it stipulates.

concretely, the locus of stipulation is in the compositional rules, which we stipulate pass referential information from left-to-right.

the idea is that there is a single switch which gives rise to incrementality in anaphoric processing; this isn’t localized to the lexical entries of individual connectives.

In developing a more principled theory of anaphora, what we’ve learned is that the literature has essentially been mistaken in taking the accessibility generalizations at face value.

In order to maintain a parsimonious semantic theory, due care needs to be taken to address the role of pragmatic factors.

Developing an understanding of the pragmatics of referential information is essential in order to improve on our understanding of the semantic component.

As we’ve seen, it’s possible to retain some of the appealing aspects of dynamic semantics - such as the dynamic notion of content - while improving upon the stipulative nature of extant dynamic theories.

A promissory list of topics, for the latter third of the course:

- Weak vs. strong readings of donkey sentences, and the relationship with free choice and homogeneity [cite:@Kanazawa1994;@Kanazawa2001;@Chierchia1995;@ChampollionEtAl2019].
- Plurality and generalized quantification in second-generation dynamic theories [cite:@vandenBerg1996;@Nouwen2003;@Keshet2019].
- Modality, modal subordination, and hypothetical discourse referents [cite:@GroenendijkEtAl1996;@Kibble1994;@Veltman1996;@Roberts1989;@Hofmann2019;]
- Dynamic inquisitive semantics [cite:@DotlacilRoelofsen2019;@DotlacilRoelofsen2021].
- Filipe Hisao Kobayashi on /post-suppositions/ [cite:@Brasoveanu2013;@Charlow2016].

* References

#+print_bibliography:

* Footnotes

[fn:8] In fact, we only really need two. \(\fap\) and \(\bap\) are the result of applying the applicative lift combinator ~liftA2~ to forwards and backwards function application respectively. 
[fn:7] Note that the workings of \(\dag\) are highly reminiscent of Mandelkern's independently-developed disjunctive /witness presupposition/ [cite:@Mandelkern2022]. Unlike Mandelkern, we don't make use of presuppositional machinery to militate where indefinites introduce anaphoric information, and therefore EDS avoids some of the pitfalls of Mandelkern's static theory. We won't discuss this in detail today, but Mandelkern must make an ad hoc distinction between anaphoric presuppositions and ordinary presuppositions, in terms of how they constrain (or fail to constrain) affect update. The bridge principle of EDS, on the other hand, is totally orthodox. 

[fn:6] A sentence \(\phi \) Strawson entails a sentence \(\psi\) if, when the presuppositions of \(\phi \) are satisfied, \(\phi \) entails \(\psi\) [cite:@vonFintel1999].
[fn:5] I'm optimistic that this general style of explanation can be extended to the (apparent) external staticity of conditional sentences. but this is complicated by the fact that material implication is undoubtedly not a realistic semantic proposal for conditional sentences of English. 

[fn:4] Here and throughout I assume that /no/ is the composition of sentential negation and the indefinite determiner. 
ff
#+name: neg
#+begin_exe
\ex \(\mathbf{no.ling}^v := \lambda k\,.\,\eta(\mathbf{not}) \fap \mathbf{a.ling}^v(k)\)\hfill\((e \to D\ t) \to D\ t\)
#+end_exe

[fn:3] See [cite:@Mandelkern2022] for a similar set up. 

[fn:2] Initially, we'll present EDS as an extensional system; ultimately, everything will need to be intensionalized. 
 
[fn:1] \(a\) is an implicitly universally-quantified variable over types.

* File local variables                                             :noexport:

# Local Variables:
# mode: org
# org-latex-default-packages-alist: nil
# org-latex-with-hyperref: nil
# End:

